//
// GraphicalIsochroneApi.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation

open class CoverageLonLatIsochronesRequestBuilder: NSObject {
    let currentApi: GraphicalIsochroneApi

    /**
    * enum for parameter datetimeRepresents
    */
    public enum DatetimeRepresents: String { 
        case arrival = "arrival"
        case departure = "departure"
    }
    /**
    * enum for parameter firstSectionMode
    */
    public enum FirstSectionMode: String { 
        case walking = "walking"
        case car = "car"
        case bike = "bike"
        case bss = "bss"
        case ridesharing = "ridesharing"
    }
    /**
    * enum for parameter lastSectionMode
    */
    public enum LastSectionMode: String { 
        case walking = "walking"
        case car = "car"
        case bike = "bike"
        case bss = "bss"
        case ridesharing = "ridesharing"
    }
    /**
    * enum for parameter dataFreshness
    */
    public enum DataFreshness: String { 
        case baseSchedule = "base_schedule"
        case adaptedSchedule = "adapted_schedule"
        case realtime = "realtime"
    }
    /**
    * enum for parameter travelerType
    */
    public enum TravelerType: String { 
        case cyclist = "cyclist"
        case luggage = "luggage"
        case wheelchair = "wheelchair"
        case standard = "standard"
        case motorist = "motorist"
        case fastWalker = "fast_walker"
        case slowWalker = "slow_walker"
    }
    /**
    * enum for parameter directPath
    */
    public enum DirectPath: String { 
        case indifferent = "indifferent"
        case only = "only"
        case _none = "none"
    }
    var lat:Double? = nil
    var lon:Double? = nil
    var from:String? = nil
    var to:String? = nil
    var datetime:Date? = nil
    var datetimeRepresents: DatetimeRepresents? = nil
    var maxNbTransfers:Int32? = nil
    var minNbTransfers:Int32? = nil
    var firstSectionMode: [FirstSectionMode]? = nil
    var lastSectionMode: [LastSectionMode]? = nil
    var maxDurationToPt:Int32? = nil
    var maxWalkingDurationToPt:Int32? = nil
    var maxBikeDurationToPt:Int32? = nil
    var maxBssDurationToPt:Int32? = nil
    var maxCarDurationToPt:Int32? = nil
    var maxRidesharingDurationToPt:Int32? = nil
    var walkingSpeed:Float? = nil
    var bikeSpeed:Float? = nil
    var bssSpeed:Float? = nil
    var carSpeed:Float? = nil
    var ridesharingSpeed:Float? = nil
    var forbiddenUris:[String]? = nil
    var allowedId:[String]? = nil
    var disruptionActive:Bool? = nil
    var dataFreshness: DataFreshness? = nil
    var maxDuration:Int32? = nil
    var wheelchair:Bool? = nil
    var travelerType: TravelerType? = nil
    var directPath: DirectPath? = nil
    var freeRadiusFrom:Int32? = nil
    var freeRadiusTo:Int32? = nil
    var minDuration:Int32? = nil
    var boundaryDuration:[Int32]? = nil

    public init(currentApi: GraphicalIsochroneApi) {
        self.currentApi = currentApi
    }

    open func withLat(_ lat: Double) -> CoverageLonLatIsochronesRequestBuilder {
        self.lat = lat
        return self
    }
    open func withLon(_ lon: Double) -> CoverageLonLatIsochronesRequestBuilder {
        self.lon = lon
        return self
    }
    open func withFrom(_ from: String) -> CoverageLonLatIsochronesRequestBuilder {
        self.from = from
        return self
    }
    open func withTo(_ to: String) -> CoverageLonLatIsochronesRequestBuilder {
        self.to = to
        return self
    }
    open func withDatetime(_ datetime: Date) -> CoverageLonLatIsochronesRequestBuilder {
        self.datetime = datetime
        return self
    }
    open func withDatetimeRepresents(_ datetimeRepresents: DatetimeRepresents) -> CoverageLonLatIsochronesRequestBuilder {
        self.datetimeRepresents = datetimeRepresents
        return self
    }
    open func withMaxNbTransfers(_ maxNbTransfers: Int32) -> CoverageLonLatIsochronesRequestBuilder {
        self.maxNbTransfers = maxNbTransfers
        return self
    }
    open func withMinNbTransfers(_ minNbTransfers: Int32) -> CoverageLonLatIsochronesRequestBuilder {
        self.minNbTransfers = minNbTransfers
        return self
    }
    open func withFirstSectionMode(_ firstSectionMode: [FirstSectionMode]) -> CoverageLonLatIsochronesRequestBuilder {
        self.firstSectionMode = firstSectionMode
        return self
    }
    open func withLastSectionMode(_ lastSectionMode: [LastSectionMode]) -> CoverageLonLatIsochronesRequestBuilder {
        self.lastSectionMode = lastSectionMode
        return self
    }
    open func withMaxDurationToPt(_ maxDurationToPt: Int32) -> CoverageLonLatIsochronesRequestBuilder {
        self.maxDurationToPt = maxDurationToPt
        return self
    }
    open func withMaxWalkingDurationToPt(_ maxWalkingDurationToPt: Int32) -> CoverageLonLatIsochronesRequestBuilder {
        self.maxWalkingDurationToPt = maxWalkingDurationToPt
        return self
    }
    open func withMaxBikeDurationToPt(_ maxBikeDurationToPt: Int32) -> CoverageLonLatIsochronesRequestBuilder {
        self.maxBikeDurationToPt = maxBikeDurationToPt
        return self
    }
    open func withMaxBssDurationToPt(_ maxBssDurationToPt: Int32) -> CoverageLonLatIsochronesRequestBuilder {
        self.maxBssDurationToPt = maxBssDurationToPt
        return self
    }
    open func withMaxCarDurationToPt(_ maxCarDurationToPt: Int32) -> CoverageLonLatIsochronesRequestBuilder {
        self.maxCarDurationToPt = maxCarDurationToPt
        return self
    }
    open func withMaxRidesharingDurationToPt(_ maxRidesharingDurationToPt: Int32) -> CoverageLonLatIsochronesRequestBuilder {
        self.maxRidesharingDurationToPt = maxRidesharingDurationToPt
        return self
    }
    open func withWalkingSpeed(_ walkingSpeed: Float) -> CoverageLonLatIsochronesRequestBuilder {
        self.walkingSpeed = walkingSpeed
        return self
    }
    open func withBikeSpeed(_ bikeSpeed: Float) -> CoverageLonLatIsochronesRequestBuilder {
        self.bikeSpeed = bikeSpeed
        return self
    }
    open func withBssSpeed(_ bssSpeed: Float) -> CoverageLonLatIsochronesRequestBuilder {
        self.bssSpeed = bssSpeed
        return self
    }
    open func withCarSpeed(_ carSpeed: Float) -> CoverageLonLatIsochronesRequestBuilder {
        self.carSpeed = carSpeed
        return self
    }
    open func withRidesharingSpeed(_ ridesharingSpeed: Float) -> CoverageLonLatIsochronesRequestBuilder {
        self.ridesharingSpeed = ridesharingSpeed
        return self
    }
    open func withForbiddenUris(_ forbiddenUris: [String]) -> CoverageLonLatIsochronesRequestBuilder {
        self.forbiddenUris = forbiddenUris
        return self
    }
    open func withAllowedId(_ allowedId: [String]) -> CoverageLonLatIsochronesRequestBuilder {
        self.allowedId = allowedId
        return self
    }
    open func withDisruptionActive(_ disruptionActive: Bool) -> CoverageLonLatIsochronesRequestBuilder {
        self.disruptionActive = disruptionActive
        return self
    }
    open func withDataFreshness(_ dataFreshness: DataFreshness) -> CoverageLonLatIsochronesRequestBuilder {
        self.dataFreshness = dataFreshness
        return self
    }
    open func withMaxDuration(_ maxDuration: Int32) -> CoverageLonLatIsochronesRequestBuilder {
        self.maxDuration = maxDuration
        return self
    }
    open func withWheelchair(_ wheelchair: Bool) -> CoverageLonLatIsochronesRequestBuilder {
        self.wheelchair = wheelchair
        return self
    }
    open func withTravelerType(_ travelerType: TravelerType) -> CoverageLonLatIsochronesRequestBuilder {
        self.travelerType = travelerType
        return self
    }
    open func withDirectPath(_ directPath: DirectPath) -> CoverageLonLatIsochronesRequestBuilder {
        self.directPath = directPath
        return self
    }
    open func withFreeRadiusFrom(_ freeRadiusFrom: Int32) -> CoverageLonLatIsochronesRequestBuilder {
        self.freeRadiusFrom = freeRadiusFrom
        return self
    }
    open func withFreeRadiusTo(_ freeRadiusTo: Int32) -> CoverageLonLatIsochronesRequestBuilder {
        self.freeRadiusTo = freeRadiusTo
        return self
    }
    open func withMinDuration(_ minDuration: Int32) -> CoverageLonLatIsochronesRequestBuilder {
        self.minDuration = minDuration
        return self
    }
    open func withBoundaryDuration(_ boundaryDuration: [Int32]) -> CoverageLonLatIsochronesRequestBuilder {
        self.boundaryDuration = boundaryDuration
        return self
    }

    open func makeUrl() -> String {
        var path = "/coverage/{lon};{lat}/isochrones"

        if (lat != nil) {
            let latPreEscape: String = "\(lat!)"
            let latPostEscape: String = latPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
            path = path.replacingOccurrences(of: "{lat}", with: latPostEscape, options: .literal, range: nil)
        }

        if (lon != nil) {
            let lonPreEscape: String = "\(lon!)"
            let lonPostEscape: String = lonPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
            path = path.replacingOccurrences(of: "{lon}", with: lonPostEscape, options: .literal, range: nil)
        }

        let URLString = "https://api.navitia.io/v1" + path
        let url = NSURLComponents(string: URLString)

        let paramValues: [String: Any?] = [
            "from": self.from, 
            "to": self.to, 
            "datetime": self.datetime?.encodeToJSON(), 
            "datetime_represents": self.datetimeRepresents?.rawValue, 
            "max_nb_transfers": self.maxNbTransfers?.encodeToJSON(), 
            "min_nb_transfers": self.minNbTransfers?.encodeToJSON(), 
            "first_section_mode[]": self.firstSectionMode, 
            "last_section_mode[]": self.lastSectionMode, 
            "max_duration_to_pt": self.maxDurationToPt?.encodeToJSON(), 
            "max_walking_duration_to_pt": self.maxWalkingDurationToPt?.encodeToJSON(), 
            "max_bike_duration_to_pt": self.maxBikeDurationToPt?.encodeToJSON(), 
            "max_bss_duration_to_pt": self.maxBssDurationToPt?.encodeToJSON(), 
            "max_car_duration_to_pt": self.maxCarDurationToPt?.encodeToJSON(), 
            "max_ridesharing_duration_to_pt": self.maxRidesharingDurationToPt?.encodeToJSON(), 
            "walking_speed": self.walkingSpeed, 
            "bike_speed": self.bikeSpeed, 
            "bss_speed": self.bssSpeed, 
            "car_speed": self.carSpeed, 
            "ridesharing_speed": self.ridesharingSpeed, 
            "forbidden_uris[]": self.forbiddenUris, 
            "allowed_id[]": self.allowedId, 
            "disruption_active": self.disruptionActive, 
            "data_freshness": self.dataFreshness?.rawValue, 
            "max_duration": self.maxDuration?.encodeToJSON(), 
            "wheelchair": self.wheelchair, 
            "traveler_type": self.travelerType?.rawValue, 
            "direct_path": self.directPath?.rawValue, 
            "free_radius_from": self.freeRadiusFrom?.encodeToJSON(), 
            "free_radius_to": self.freeRadiusTo?.encodeToJSON(), 
            "min_duration": self.minDuration?.encodeToJSON(), 
            "boundary_duration[]": self.boundaryDuration
        ]
        url?.queryItems = APIHelper.mapValuesToQueryItems(values: paramValues)
        url?.percentEncodedQuery = url?.percentEncodedQuery?.replacingOccurrences(of: "+", with: "%2B")

        return (url?.string ?? URLString)
    }

    open func get(completion: @escaping ((_ data: GraphicalIsrochone1?,_ error: Error?) -> Void)) {
        if (self.lat == nil) {
            completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : lat"])))
        }
        if (self.lon == nil) {
            completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : lon"])))
        }

        request(self.makeUrl())
            .authenticate(user: currentApi.token, password: "")
            .validate()
            .responseObject{ (response: (DataResponse<GraphicalIsrochone1>)) in
                switch response.result {
                case .success:
                    completion(response.result.value, nil)
                case .failure(let error):
                    completion(nil, error)
                }
            }
    }

    open func rawGet(completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
    if (self.lat == nil) {
        completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : lat"])))
    }
    if (self.lon == nil) {
        completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : lon"])))
    }

    request(self.makeUrl())
        .authenticate(user: currentApi.token, password: "")
        .validate()
        .responseString{ (response: (DataResponse<String>)) in
            switch response.result {
            case .success:
                completion(response.result.value, nil)
            case .failure(let error):
                completion(nil, error)
            }
        }
    }
}

open class CoverageRegionIsochronesRequestBuilder: NSObject {
    let currentApi: GraphicalIsochroneApi

    /**
    * enum for parameter datetimeRepresents
    */
    public enum DatetimeRepresents: String { 
        case arrival = "arrival"
        case departure = "departure"
    }
    /**
    * enum for parameter firstSectionMode
    */
    public enum FirstSectionMode: String { 
        case walking = "walking"
        case car = "car"
        case bike = "bike"
        case bss = "bss"
        case ridesharing = "ridesharing"
    }
    /**
    * enum for parameter lastSectionMode
    */
    public enum LastSectionMode: String { 
        case walking = "walking"
        case car = "car"
        case bike = "bike"
        case bss = "bss"
        case ridesharing = "ridesharing"
    }
    /**
    * enum for parameter dataFreshness
    */
    public enum DataFreshness: String { 
        case baseSchedule = "base_schedule"
        case adaptedSchedule = "adapted_schedule"
        case realtime = "realtime"
    }
    /**
    * enum for parameter travelerType
    */
    public enum TravelerType: String { 
        case cyclist = "cyclist"
        case luggage = "luggage"
        case wheelchair = "wheelchair"
        case standard = "standard"
        case motorist = "motorist"
        case fastWalker = "fast_walker"
        case slowWalker = "slow_walker"
    }
    /**
    * enum for parameter directPath
    */
    public enum DirectPath: String { 
        case indifferent = "indifferent"
        case only = "only"
        case _none = "none"
    }
    var region:String? = nil
    var from:String? = nil
    var to:String? = nil
    var datetime:Date? = nil
    var datetimeRepresents: DatetimeRepresents? = nil
    var maxNbTransfers:Int32? = nil
    var minNbTransfers:Int32? = nil
    var firstSectionMode: [FirstSectionMode]? = nil
    var lastSectionMode: [LastSectionMode]? = nil
    var maxDurationToPt:Int32? = nil
    var maxWalkingDurationToPt:Int32? = nil
    var maxBikeDurationToPt:Int32? = nil
    var maxBssDurationToPt:Int32? = nil
    var maxCarDurationToPt:Int32? = nil
    var maxRidesharingDurationToPt:Int32? = nil
    var walkingSpeed:Float? = nil
    var bikeSpeed:Float? = nil
    var bssSpeed:Float? = nil
    var carSpeed:Float? = nil
    var ridesharingSpeed:Float? = nil
    var forbiddenUris:[String]? = nil
    var allowedId:[String]? = nil
    var disruptionActive:Bool? = nil
    var dataFreshness: DataFreshness? = nil
    var maxDuration:Int32? = nil
    var wheelchair:Bool? = nil
    var travelerType: TravelerType? = nil
    var directPath: DirectPath? = nil
    var freeRadiusFrom:Int32? = nil
    var freeRadiusTo:Int32? = nil
    var minDuration:Int32? = nil
    var boundaryDuration:[Int32]? = nil

    public init(currentApi: GraphicalIsochroneApi) {
        self.currentApi = currentApi
    }

    open func withRegion(_ region: String) -> CoverageRegionIsochronesRequestBuilder {
        self.region = region
        return self
    }
    open func withFrom(_ from: String) -> CoverageRegionIsochronesRequestBuilder {
        self.from = from
        return self
    }
    open func withTo(_ to: String) -> CoverageRegionIsochronesRequestBuilder {
        self.to = to
        return self
    }
    open func withDatetime(_ datetime: Date) -> CoverageRegionIsochronesRequestBuilder {
        self.datetime = datetime
        return self
    }
    open func withDatetimeRepresents(_ datetimeRepresents: DatetimeRepresents) -> CoverageRegionIsochronesRequestBuilder {
        self.datetimeRepresents = datetimeRepresents
        return self
    }
    open func withMaxNbTransfers(_ maxNbTransfers: Int32) -> CoverageRegionIsochronesRequestBuilder {
        self.maxNbTransfers = maxNbTransfers
        return self
    }
    open func withMinNbTransfers(_ minNbTransfers: Int32) -> CoverageRegionIsochronesRequestBuilder {
        self.minNbTransfers = minNbTransfers
        return self
    }
    open func withFirstSectionMode(_ firstSectionMode: [FirstSectionMode]) -> CoverageRegionIsochronesRequestBuilder {
        self.firstSectionMode = firstSectionMode
        return self
    }
    open func withLastSectionMode(_ lastSectionMode: [LastSectionMode]) -> CoverageRegionIsochronesRequestBuilder {
        self.lastSectionMode = lastSectionMode
        return self
    }
    open func withMaxDurationToPt(_ maxDurationToPt: Int32) -> CoverageRegionIsochronesRequestBuilder {
        self.maxDurationToPt = maxDurationToPt
        return self
    }
    open func withMaxWalkingDurationToPt(_ maxWalkingDurationToPt: Int32) -> CoverageRegionIsochronesRequestBuilder {
        self.maxWalkingDurationToPt = maxWalkingDurationToPt
        return self
    }
    open func withMaxBikeDurationToPt(_ maxBikeDurationToPt: Int32) -> CoverageRegionIsochronesRequestBuilder {
        self.maxBikeDurationToPt = maxBikeDurationToPt
        return self
    }
    open func withMaxBssDurationToPt(_ maxBssDurationToPt: Int32) -> CoverageRegionIsochronesRequestBuilder {
        self.maxBssDurationToPt = maxBssDurationToPt
        return self
    }
    open func withMaxCarDurationToPt(_ maxCarDurationToPt: Int32) -> CoverageRegionIsochronesRequestBuilder {
        self.maxCarDurationToPt = maxCarDurationToPt
        return self
    }
    open func withMaxRidesharingDurationToPt(_ maxRidesharingDurationToPt: Int32) -> CoverageRegionIsochronesRequestBuilder {
        self.maxRidesharingDurationToPt = maxRidesharingDurationToPt
        return self
    }
    open func withWalkingSpeed(_ walkingSpeed: Float) -> CoverageRegionIsochronesRequestBuilder {
        self.walkingSpeed = walkingSpeed
        return self
    }
    open func withBikeSpeed(_ bikeSpeed: Float) -> CoverageRegionIsochronesRequestBuilder {
        self.bikeSpeed = bikeSpeed
        return self
    }
    open func withBssSpeed(_ bssSpeed: Float) -> CoverageRegionIsochronesRequestBuilder {
        self.bssSpeed = bssSpeed
        return self
    }
    open func withCarSpeed(_ carSpeed: Float) -> CoverageRegionIsochronesRequestBuilder {
        self.carSpeed = carSpeed
        return self
    }
    open func withRidesharingSpeed(_ ridesharingSpeed: Float) -> CoverageRegionIsochronesRequestBuilder {
        self.ridesharingSpeed = ridesharingSpeed
        return self
    }
    open func withForbiddenUris(_ forbiddenUris: [String]) -> CoverageRegionIsochronesRequestBuilder {
        self.forbiddenUris = forbiddenUris
        return self
    }
    open func withAllowedId(_ allowedId: [String]) -> CoverageRegionIsochronesRequestBuilder {
        self.allowedId = allowedId
        return self
    }
    open func withDisruptionActive(_ disruptionActive: Bool) -> CoverageRegionIsochronesRequestBuilder {
        self.disruptionActive = disruptionActive
        return self
    }
    open func withDataFreshness(_ dataFreshness: DataFreshness) -> CoverageRegionIsochronesRequestBuilder {
        self.dataFreshness = dataFreshness
        return self
    }
    open func withMaxDuration(_ maxDuration: Int32) -> CoverageRegionIsochronesRequestBuilder {
        self.maxDuration = maxDuration
        return self
    }
    open func withWheelchair(_ wheelchair: Bool) -> CoverageRegionIsochronesRequestBuilder {
        self.wheelchair = wheelchair
        return self
    }
    open func withTravelerType(_ travelerType: TravelerType) -> CoverageRegionIsochronesRequestBuilder {
        self.travelerType = travelerType
        return self
    }
    open func withDirectPath(_ directPath: DirectPath) -> CoverageRegionIsochronesRequestBuilder {
        self.directPath = directPath
        return self
    }
    open func withFreeRadiusFrom(_ freeRadiusFrom: Int32) -> CoverageRegionIsochronesRequestBuilder {
        self.freeRadiusFrom = freeRadiusFrom
        return self
    }
    open func withFreeRadiusTo(_ freeRadiusTo: Int32) -> CoverageRegionIsochronesRequestBuilder {
        self.freeRadiusTo = freeRadiusTo
        return self
    }
    open func withMinDuration(_ minDuration: Int32) -> CoverageRegionIsochronesRequestBuilder {
        self.minDuration = minDuration
        return self
    }
    open func withBoundaryDuration(_ boundaryDuration: [Int32]) -> CoverageRegionIsochronesRequestBuilder {
        self.boundaryDuration = boundaryDuration
        return self
    }

    open func makeUrl() -> String {
        var path = "/coverage/{region}/isochrones"

        if (region != nil) {
            let regionPreEscape: String = "\(region!)"
            let regionPostEscape: String = regionPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
            path = path.replacingOccurrences(of: "{region}", with: regionPostEscape, options: .literal, range: nil)
        }

        let URLString = "https://api.navitia.io/v1" + path
        let url = NSURLComponents(string: URLString)

        let paramValues: [String: Any?] = [
            "from": self.from, 
            "to": self.to, 
            "datetime": self.datetime?.encodeToJSON(), 
            "datetime_represents": self.datetimeRepresents?.rawValue, 
            "max_nb_transfers": self.maxNbTransfers?.encodeToJSON(), 
            "min_nb_transfers": self.minNbTransfers?.encodeToJSON(), 
            "first_section_mode[]": self.firstSectionMode, 
            "last_section_mode[]": self.lastSectionMode, 
            "max_duration_to_pt": self.maxDurationToPt?.encodeToJSON(), 
            "max_walking_duration_to_pt": self.maxWalkingDurationToPt?.encodeToJSON(), 
            "max_bike_duration_to_pt": self.maxBikeDurationToPt?.encodeToJSON(), 
            "max_bss_duration_to_pt": self.maxBssDurationToPt?.encodeToJSON(), 
            "max_car_duration_to_pt": self.maxCarDurationToPt?.encodeToJSON(), 
            "max_ridesharing_duration_to_pt": self.maxRidesharingDurationToPt?.encodeToJSON(), 
            "walking_speed": self.walkingSpeed, 
            "bike_speed": self.bikeSpeed, 
            "bss_speed": self.bssSpeed, 
            "car_speed": self.carSpeed, 
            "ridesharing_speed": self.ridesharingSpeed, 
            "forbidden_uris[]": self.forbiddenUris, 
            "allowed_id[]": self.allowedId, 
            "disruption_active": self.disruptionActive, 
            "data_freshness": self.dataFreshness?.rawValue, 
            "max_duration": self.maxDuration?.encodeToJSON(), 
            "wheelchair": self.wheelchair, 
            "traveler_type": self.travelerType?.rawValue, 
            "direct_path": self.directPath?.rawValue, 
            "free_radius_from": self.freeRadiusFrom?.encodeToJSON(), 
            "free_radius_to": self.freeRadiusTo?.encodeToJSON(), 
            "min_duration": self.minDuration?.encodeToJSON(), 
            "boundary_duration[]": self.boundaryDuration
        ]
        url?.queryItems = APIHelper.mapValuesToQueryItems(values: paramValues)
        url?.percentEncodedQuery = url?.percentEncodedQuery?.replacingOccurrences(of: "+", with: "%2B")

        return (url?.string ?? URLString)
    }

    open func get(completion: @escaping ((_ data: GraphicalIsrochone1?,_ error: Error?) -> Void)) {
        if (self.region == nil) {
            completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : region"])))
        }

        request(self.makeUrl())
            .authenticate(user: currentApi.token, password: "")
            .validate()
            .responseObject{ (response: (DataResponse<GraphicalIsrochone1>)) in
                switch response.result {
                case .success:
                    completion(response.result.value, nil)
                case .failure(let error):
                    completion(nil, error)
                }
            }
    }

    open func rawGet(completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
    if (self.region == nil) {
        completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : region"])))
    }

    request(self.makeUrl())
        .authenticate(user: currentApi.token, password: "")
        .validate()
        .responseString{ (response: (DataResponse<String>)) in
            switch response.result {
            case .success:
                completion(response.result.value, nil)
            case .failure(let error):
                completion(nil, error)
            }
        }
    }
}



open class GraphicalIsochroneApi: APIBase {
    let token: String

    public init(token: String) {
        self.token = token
    }

    public func newCoverageLonLatIsochronesRequestBuilder() -> CoverageLonLatIsochronesRequestBuilder {
        return CoverageLonLatIsochronesRequestBuilder(currentApi: self)
    }
    public func newCoverageRegionIsochronesRequestBuilder() -> CoverageRegionIsochronesRequestBuilder {
        return CoverageRegionIsochronesRequestBuilder(currentApi: self)
    }
}
