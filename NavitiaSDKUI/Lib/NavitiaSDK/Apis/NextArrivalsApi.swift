//
// NextArrivalsApi.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation

open class CoverageLonLatArrivalsRequestBuilder: NSObject {
    let currentApi: NextArrivalsApi

    /**
    * enum for parameter dataFreshness
    */
    public enum DataFreshness: String { 
        case baseSchedule = "base_schedule"
        case adaptedSchedule = "adapted_schedule"
        case realtime = "realtime"
    }
    var lat:Double? = nil
    var lon:Double? = nil
    var filter:String? = nil
    var fromDatetime:Date? = nil
    var untilDatetime:Date? = nil
    var duration:Int32? = nil
    var depth:Int32? = nil
    var count:Int32? = nil
    var startPage:Int32? = nil
    var maxDateTimes:Int32? = nil
    var forbiddenId:[String]? = nil
    var forbiddenUris:[String]? = nil
    var calendar:String? = nil
    var distance:Int32? = nil
    var showCodes:Bool? = nil
    var dataFreshness: DataFreshness? = nil
    var itemsPerSchedule:Int32? = nil
    var disableGeojson:Bool? = nil
    var debugURL: String? = nil

    public init(currentApi: NextArrivalsApi) {
        self.currentApi = currentApi
    }

    open func withLat(_ lat: Double?) -> CoverageLonLatArrivalsRequestBuilder {
        self.lat = lat
        
        return self
    }
    open func withLon(_ lon: Double?) -> CoverageLonLatArrivalsRequestBuilder {
        self.lon = lon
        
        return self
    }
    open func withFilter(_ filter: String?) -> CoverageLonLatArrivalsRequestBuilder {
        self.filter = filter
        
        return self
    }
    open func withFromDatetime(_ fromDatetime: Date?) -> CoverageLonLatArrivalsRequestBuilder {
        self.fromDatetime = fromDatetime
        
        return self
    }
    open func withUntilDatetime(_ untilDatetime: Date?) -> CoverageLonLatArrivalsRequestBuilder {
        self.untilDatetime = untilDatetime
        
        return self
    }
    open func withDuration(_ duration: Int32?) -> CoverageLonLatArrivalsRequestBuilder {
        self.duration = duration
        
        return self
    }
    open func withDepth(_ depth: Int32?) -> CoverageLonLatArrivalsRequestBuilder {
        self.depth = depth
        
        return self
    }
    open func withCount(_ count: Int32?) -> CoverageLonLatArrivalsRequestBuilder {
        self.count = count
        
        return self
    }
    open func withStartPage(_ startPage: Int32?) -> CoverageLonLatArrivalsRequestBuilder {
        self.startPage = startPage
        
        return self
    }
    open func withMaxDateTimes(_ maxDateTimes: Int32?) -> CoverageLonLatArrivalsRequestBuilder {
        self.maxDateTimes = maxDateTimes
        
        return self
    }
    open func withForbiddenId(_ forbiddenId: [String]?) -> CoverageLonLatArrivalsRequestBuilder {
        self.forbiddenId = forbiddenId
        
        return self
    }
    open func withForbiddenUris(_ forbiddenUris: [String]?) -> CoverageLonLatArrivalsRequestBuilder {
        self.forbiddenUris = forbiddenUris
        
        return self
    }
    open func withCalendar(_ calendar: String?) -> CoverageLonLatArrivalsRequestBuilder {
        self.calendar = calendar
        
        return self
    }
    open func withDistance(_ distance: Int32?) -> CoverageLonLatArrivalsRequestBuilder {
        self.distance = distance
        
        return self
    }
    open func withShowCodes(_ showCodes: Bool?) -> CoverageLonLatArrivalsRequestBuilder {
        self.showCodes = showCodes
        
        return self
    }
    open func withDataFreshness(_ dataFreshness: DataFreshness?) -> CoverageLonLatArrivalsRequestBuilder {
        self.dataFreshness = dataFreshness

        return self
    }
    open func withItemsPerSchedule(_ itemsPerSchedule: Int32?) -> CoverageLonLatArrivalsRequestBuilder {
        self.itemsPerSchedule = itemsPerSchedule
        
        return self
    }
    open func withDisableGeojson(_ disableGeojson: Bool?) -> CoverageLonLatArrivalsRequestBuilder {
        self.disableGeojson = disableGeojson
        
        return self
    }



    open func withDebugURL(_ debugURL: String?) -> CoverageLonLatArrivalsRequestBuilder {
        self.debugURL = debugURL
        return self
    }

    open func makeUrl() -> String {
        var path = "/coverage/{lon};{lat}/arrivals"

        if let lat = lat {
            let latPreEscape: String = "\(lat)"
            let latPostEscape: String = latPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
            path = path.replacingOccurrences(of: "{lat}", with: latPostEscape, options: .literal, range: nil)
        }

        if let lon = lon {
            let lonPreEscape: String = "\(lon)"
            let lonPostEscape: String = lonPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
            path = path.replacingOccurrences(of: "{lon}", with: lonPostEscape, options: .literal, range: nil)
        }

        let URLString = String(format: "%@%@", NavitiaSDKAPI.basePath, path)
        let url = NSURLComponents(string: URLString)

        let paramValues: [String: Any?] = [
            "filter": self.filter, 
            "from_datetime": self.fromDatetime?.encodeToJSON(), 
            "until_datetime": self.untilDatetime?.encodeToJSON(), 
            "duration": self.duration?.encodeToJSON(), 
            "depth": self.depth?.encodeToJSON(), 
            "count": self.count?.encodeToJSON(), 
            "start_page": self.startPage?.encodeToJSON(), 
            "max_date_times": self.maxDateTimes?.encodeToJSON(), 
            "forbidden_id[]": self.forbiddenId, 
            "forbidden_uris[]": self.forbiddenUris, 
            "calendar": self.calendar, 
            "distance": self.distance?.encodeToJSON(), 
            "show_codes": self.showCodes, 
            "data_freshness": self.dataFreshness?.rawValue, 
            "items_per_schedule": self.itemsPerSchedule?.encodeToJSON(), 
            "disable_geojson": self.disableGeojson
        ]
        url?.queryItems = APIHelper.mapValuesToQueryItems(values: paramValues)
        url?.percentEncodedQuery = url?.percentEncodedQuery?.replacingOccurrences(of: "+", with: "%2B")

        return (debugURL ?? url?.string ?? URLString)
    }

    open func get(completion: @escaping ((_ data: Arrivals?,_ error: Error?) -> Void)) {
        if (self.lat == nil) {
            completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : lat"])))
        }
        if (self.lon == nil) {
            completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : lon"])))
        }

        request(self.makeUrl())
            .authenticate(user: currentApi.token, password: "")
            .validate()
            .responseObject{ (response: (DataResponse<Arrivals>)) in
                switch response.result {
                case .success:
                    completion(response.result.value, nil)
                case .failure(let error):
                    completion(nil, error)
                }
            }
    }

    open func rawGet(completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
    if (self.lat == nil) {
        completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : lat"])))
    }
    if (self.lon == nil) {
        completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : lon"])))
    }

    request(self.makeUrl())
        .authenticate(user: currentApi.token, password: "")
        .validate()
        .responseString{ (response: (DataResponse<String>)) in
            switch response.result {
            case .success:
                completion(response.result.value, nil)
            case .failure(let error):
                completion(nil, error)
            }
        }
    }
}

open class CoverageLonLatUriArrivalsRequestBuilder: NSObject {
    let currentApi: NextArrivalsApi

    /**
    * enum for parameter dataFreshness
    */
    public enum DataFreshness: String { 
        case baseSchedule = "base_schedule"
        case adaptedSchedule = "adapted_schedule"
        case realtime = "realtime"
    }
    var lat:Double? = nil
    var lon:Double? = nil
    var uri:String? = nil
    var filter:String? = nil
    var fromDatetime:Date? = nil
    var untilDatetime:Date? = nil
    var duration:Int32? = nil
    var depth:Int32? = nil
    var count:Int32? = nil
    var startPage:Int32? = nil
    var maxDateTimes:Int32? = nil
    var forbiddenId:[String]? = nil
    var forbiddenUris:[String]? = nil
    var calendar:String? = nil
    var distance:Int32? = nil
    var showCodes:Bool? = nil
    var dataFreshness: DataFreshness? = nil
    var itemsPerSchedule:Int32? = nil
    var disableGeojson:Bool? = nil
    var debugURL: String? = nil

    public init(currentApi: NextArrivalsApi) {
        self.currentApi = currentApi
    }

    open func withLat(_ lat: Double?) -> CoverageLonLatUriArrivalsRequestBuilder {
        self.lat = lat
        
        return self
    }
    open func withLon(_ lon: Double?) -> CoverageLonLatUriArrivalsRequestBuilder {
        self.lon = lon
        
        return self
    }
    open func withUri(_ uri: String?) -> CoverageLonLatUriArrivalsRequestBuilder {
        self.uri = uri
        
        return self
    }
    open func withFilter(_ filter: String?) -> CoverageLonLatUriArrivalsRequestBuilder {
        self.filter = filter
        
        return self
    }
    open func withFromDatetime(_ fromDatetime: Date?) -> CoverageLonLatUriArrivalsRequestBuilder {
        self.fromDatetime = fromDatetime
        
        return self
    }
    open func withUntilDatetime(_ untilDatetime: Date?) -> CoverageLonLatUriArrivalsRequestBuilder {
        self.untilDatetime = untilDatetime
        
        return self
    }
    open func withDuration(_ duration: Int32?) -> CoverageLonLatUriArrivalsRequestBuilder {
        self.duration = duration
        
        return self
    }
    open func withDepth(_ depth: Int32?) -> CoverageLonLatUriArrivalsRequestBuilder {
        self.depth = depth
        
        return self
    }
    open func withCount(_ count: Int32?) -> CoverageLonLatUriArrivalsRequestBuilder {
        self.count = count
        
        return self
    }
    open func withStartPage(_ startPage: Int32?) -> CoverageLonLatUriArrivalsRequestBuilder {
        self.startPage = startPage
        
        return self
    }
    open func withMaxDateTimes(_ maxDateTimes: Int32?) -> CoverageLonLatUriArrivalsRequestBuilder {
        self.maxDateTimes = maxDateTimes
        
        return self
    }
    open func withForbiddenId(_ forbiddenId: [String]?) -> CoverageLonLatUriArrivalsRequestBuilder {
        self.forbiddenId = forbiddenId
        
        return self
    }
    open func withForbiddenUris(_ forbiddenUris: [String]?) -> CoverageLonLatUriArrivalsRequestBuilder {
        self.forbiddenUris = forbiddenUris
        
        return self
    }
    open func withCalendar(_ calendar: String?) -> CoverageLonLatUriArrivalsRequestBuilder {
        self.calendar = calendar
        
        return self
    }
    open func withDistance(_ distance: Int32?) -> CoverageLonLatUriArrivalsRequestBuilder {
        self.distance = distance
        
        return self
    }
    open func withShowCodes(_ showCodes: Bool?) -> CoverageLonLatUriArrivalsRequestBuilder {
        self.showCodes = showCodes
        
        return self
    }
    open func withDataFreshness(_ dataFreshness: DataFreshness?) -> CoverageLonLatUriArrivalsRequestBuilder {
        self.dataFreshness = dataFreshness

        return self
    }
    open func withItemsPerSchedule(_ itemsPerSchedule: Int32?) -> CoverageLonLatUriArrivalsRequestBuilder {
        self.itemsPerSchedule = itemsPerSchedule
        
        return self
    }
    open func withDisableGeojson(_ disableGeojson: Bool?) -> CoverageLonLatUriArrivalsRequestBuilder {
        self.disableGeojson = disableGeojson
        
        return self
    }



    open func withDebugURL(_ debugURL: String?) -> CoverageLonLatUriArrivalsRequestBuilder {
        self.debugURL = debugURL
        return self
    }

    open func makeUrl() -> String {
        var path = "/coverage/{lon};{lat}/{uri}/arrivals"

        if let lat = lat {
            let latPreEscape: String = "\(lat)"
            let latPostEscape: String = latPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
            path = path.replacingOccurrences(of: "{lat}", with: latPostEscape, options: .literal, range: nil)
        }

        if let lon = lon {
            let lonPreEscape: String = "\(lon)"
            let lonPostEscape: String = lonPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
            path = path.replacingOccurrences(of: "{lon}", with: lonPostEscape, options: .literal, range: nil)
        }

        if let uri = uri {
            let uriPreEscape: String = "\(uri)"
            let uriPostEscape: String = uriPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
            path = path.replacingOccurrences(of: "{uri}", with: uriPostEscape, options: .literal, range: nil)
        }

        let URLString = String(format: "%@%@", NavitiaSDKAPI.basePath, path)
        let url = NSURLComponents(string: URLString)

        let paramValues: [String: Any?] = [
            "filter": self.filter, 
            "from_datetime": self.fromDatetime?.encodeToJSON(), 
            "until_datetime": self.untilDatetime?.encodeToJSON(), 
            "duration": self.duration?.encodeToJSON(), 
            "depth": self.depth?.encodeToJSON(), 
            "count": self.count?.encodeToJSON(), 
            "start_page": self.startPage?.encodeToJSON(), 
            "max_date_times": self.maxDateTimes?.encodeToJSON(), 
            "forbidden_id[]": self.forbiddenId, 
            "forbidden_uris[]": self.forbiddenUris, 
            "calendar": self.calendar, 
            "distance": self.distance?.encodeToJSON(), 
            "show_codes": self.showCodes, 
            "data_freshness": self.dataFreshness?.rawValue, 
            "items_per_schedule": self.itemsPerSchedule?.encodeToJSON(), 
            "disable_geojson": self.disableGeojson
        ]
        url?.queryItems = APIHelper.mapValuesToQueryItems(values: paramValues)
        url?.percentEncodedQuery = url?.percentEncodedQuery?.replacingOccurrences(of: "+", with: "%2B")

        return (debugURL ?? url?.string ?? URLString)
    }

    open func get(completion: @escaping ((_ data: Arrivals?,_ error: Error?) -> Void)) {
        if (self.lat == nil) {
            completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : lat"])))
        }
        if (self.lon == nil) {
            completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : lon"])))
        }
        if (self.uri == nil) {
            completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : uri"])))
        }

        request(self.makeUrl())
            .authenticate(user: currentApi.token, password: "")
            .validate()
            .responseObject{ (response: (DataResponse<Arrivals>)) in
                switch response.result {
                case .success:
                    completion(response.result.value, nil)
                case .failure(let error):
                    completion(nil, error)
                }
            }
    }

    open func rawGet(completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
    if (self.lat == nil) {
        completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : lat"])))
    }
    if (self.lon == nil) {
        completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : lon"])))
    }
    if (self.uri == nil) {
        completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : uri"])))
    }

    request(self.makeUrl())
        .authenticate(user: currentApi.token, password: "")
        .validate()
        .responseString{ (response: (DataResponse<String>)) in
            switch response.result {
            case .success:
                completion(response.result.value, nil)
            case .failure(let error):
                completion(nil, error)
            }
        }
    }
}

open class CoverageRegionArrivalsRequestBuilder: NSObject {
    let currentApi: NextArrivalsApi

    /**
    * enum for parameter dataFreshness
    */
    public enum DataFreshness: String { 
        case baseSchedule = "base_schedule"
        case adaptedSchedule = "adapted_schedule"
        case realtime = "realtime"
    }
    var region:String? = nil
    var filter:String? = nil
    var fromDatetime:Date? = nil
    var untilDatetime:Date? = nil
    var duration:Int32? = nil
    var depth:Int32? = nil
    var count:Int32? = nil
    var startPage:Int32? = nil
    var maxDateTimes:Int32? = nil
    var forbiddenId:[String]? = nil
    var forbiddenUris:[String]? = nil
    var calendar:String? = nil
    var distance:Int32? = nil
    var showCodes:Bool? = nil
    var dataFreshness: DataFreshness? = nil
    var itemsPerSchedule:Int32? = nil
    var disableGeojson:Bool? = nil
    var debugURL: String? = nil

    public init(currentApi: NextArrivalsApi) {
        self.currentApi = currentApi
    }

    open func withRegion(_ region: String?) -> CoverageRegionArrivalsRequestBuilder {
        self.region = region
        
        return self
    }
    open func withFilter(_ filter: String?) -> CoverageRegionArrivalsRequestBuilder {
        self.filter = filter
        
        return self
    }
    open func withFromDatetime(_ fromDatetime: Date?) -> CoverageRegionArrivalsRequestBuilder {
        self.fromDatetime = fromDatetime
        
        return self
    }
    open func withUntilDatetime(_ untilDatetime: Date?) -> CoverageRegionArrivalsRequestBuilder {
        self.untilDatetime = untilDatetime
        
        return self
    }
    open func withDuration(_ duration: Int32?) -> CoverageRegionArrivalsRequestBuilder {
        self.duration = duration
        
        return self
    }
    open func withDepth(_ depth: Int32?) -> CoverageRegionArrivalsRequestBuilder {
        self.depth = depth
        
        return self
    }
    open func withCount(_ count: Int32?) -> CoverageRegionArrivalsRequestBuilder {
        self.count = count
        
        return self
    }
    open func withStartPage(_ startPage: Int32?) -> CoverageRegionArrivalsRequestBuilder {
        self.startPage = startPage
        
        return self
    }
    open func withMaxDateTimes(_ maxDateTimes: Int32?) -> CoverageRegionArrivalsRequestBuilder {
        self.maxDateTimes = maxDateTimes
        
        return self
    }
    open func withForbiddenId(_ forbiddenId: [String]?) -> CoverageRegionArrivalsRequestBuilder {
        self.forbiddenId = forbiddenId
        
        return self
    }
    open func withForbiddenUris(_ forbiddenUris: [String]?) -> CoverageRegionArrivalsRequestBuilder {
        self.forbiddenUris = forbiddenUris
        
        return self
    }
    open func withCalendar(_ calendar: String?) -> CoverageRegionArrivalsRequestBuilder {
        self.calendar = calendar
        
        return self
    }
    open func withDistance(_ distance: Int32?) -> CoverageRegionArrivalsRequestBuilder {
        self.distance = distance
        
        return self
    }
    open func withShowCodes(_ showCodes: Bool?) -> CoverageRegionArrivalsRequestBuilder {
        self.showCodes = showCodes
        
        return self
    }
    open func withDataFreshness(_ dataFreshness: DataFreshness?) -> CoverageRegionArrivalsRequestBuilder {
        self.dataFreshness = dataFreshness

        return self
    }
    open func withItemsPerSchedule(_ itemsPerSchedule: Int32?) -> CoverageRegionArrivalsRequestBuilder {
        self.itemsPerSchedule = itemsPerSchedule
        
        return self
    }
    open func withDisableGeojson(_ disableGeojson: Bool?) -> CoverageRegionArrivalsRequestBuilder {
        self.disableGeojson = disableGeojson
        
        return self
    }



    open func withDebugURL(_ debugURL: String?) -> CoverageRegionArrivalsRequestBuilder {
        self.debugURL = debugURL
        return self
    }

    open func makeUrl() -> String {
        var path = "/coverage/{region}/arrivals"

        if let region = region {
            let regionPreEscape: String = "\(region)"
            let regionPostEscape: String = regionPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
            path = path.replacingOccurrences(of: "{region}", with: regionPostEscape, options: .literal, range: nil)
        }

        let URLString = String(format: "%@%@", NavitiaSDKAPI.basePath, path)
        let url = NSURLComponents(string: URLString)

        let paramValues: [String: Any?] = [
            "filter": self.filter, 
            "from_datetime": self.fromDatetime?.encodeToJSON(), 
            "until_datetime": self.untilDatetime?.encodeToJSON(), 
            "duration": self.duration?.encodeToJSON(), 
            "depth": self.depth?.encodeToJSON(), 
            "count": self.count?.encodeToJSON(), 
            "start_page": self.startPage?.encodeToJSON(), 
            "max_date_times": self.maxDateTimes?.encodeToJSON(), 
            "forbidden_id[]": self.forbiddenId, 
            "forbidden_uris[]": self.forbiddenUris, 
            "calendar": self.calendar, 
            "distance": self.distance?.encodeToJSON(), 
            "show_codes": self.showCodes, 
            "data_freshness": self.dataFreshness?.rawValue, 
            "items_per_schedule": self.itemsPerSchedule?.encodeToJSON(), 
            "disable_geojson": self.disableGeojson
        ]
        url?.queryItems = APIHelper.mapValuesToQueryItems(values: paramValues)
        url?.percentEncodedQuery = url?.percentEncodedQuery?.replacingOccurrences(of: "+", with: "%2B")

        return (debugURL ?? url?.string ?? URLString)
    }

    open func get(completion: @escaping ((_ data: Arrivals?,_ error: Error?) -> Void)) {
        if (self.region == nil) {
            completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : region"])))
        }

        request(self.makeUrl())
            .authenticate(user: currentApi.token, password: "")
            .validate()
            .responseObject{ (response: (DataResponse<Arrivals>)) in
                switch response.result {
                case .success:
                    completion(response.result.value, nil)
                case .failure(let error):
                    completion(nil, error)
                }
            }
    }

    open func rawGet(completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
    if (self.region == nil) {
        completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : region"])))
    }

    request(self.makeUrl())
        .authenticate(user: currentApi.token, password: "")
        .validate()
        .responseString{ (response: (DataResponse<String>)) in
            switch response.result {
            case .success:
                completion(response.result.value, nil)
            case .failure(let error):
                completion(nil, error)
            }
        }
    }
}

open class CoverageRegionUriArrivalsRequestBuilder: NSObject {
    let currentApi: NextArrivalsApi

    /**
    * enum for parameter dataFreshness
    */
    public enum DataFreshness: String { 
        case baseSchedule = "base_schedule"
        case adaptedSchedule = "adapted_schedule"
        case realtime = "realtime"
    }
    var region:String? = nil
    var uri:String? = nil
    var filter:String? = nil
    var fromDatetime:Date? = nil
    var untilDatetime:Date? = nil
    var duration:Int32? = nil
    var depth:Int32? = nil
    var count:Int32? = nil
    var startPage:Int32? = nil
    var maxDateTimes:Int32? = nil
    var forbiddenId:[String]? = nil
    var forbiddenUris:[String]? = nil
    var calendar:String? = nil
    var distance:Int32? = nil
    var showCodes:Bool? = nil
    var dataFreshness: DataFreshness? = nil
    var itemsPerSchedule:Int32? = nil
    var disableGeojson:Bool? = nil
    var debugURL: String? = nil

    public init(currentApi: NextArrivalsApi) {
        self.currentApi = currentApi
    }

    open func withRegion(_ region: String?) -> CoverageRegionUriArrivalsRequestBuilder {
        self.region = region
        
        return self
    }
    open func withUri(_ uri: String?) -> CoverageRegionUriArrivalsRequestBuilder {
        self.uri = uri
        
        return self
    }
    open func withFilter(_ filter: String?) -> CoverageRegionUriArrivalsRequestBuilder {
        self.filter = filter
        
        return self
    }
    open func withFromDatetime(_ fromDatetime: Date?) -> CoverageRegionUriArrivalsRequestBuilder {
        self.fromDatetime = fromDatetime
        
        return self
    }
    open func withUntilDatetime(_ untilDatetime: Date?) -> CoverageRegionUriArrivalsRequestBuilder {
        self.untilDatetime = untilDatetime
        
        return self
    }
    open func withDuration(_ duration: Int32?) -> CoverageRegionUriArrivalsRequestBuilder {
        self.duration = duration
        
        return self
    }
    open func withDepth(_ depth: Int32?) -> CoverageRegionUriArrivalsRequestBuilder {
        self.depth = depth
        
        return self
    }
    open func withCount(_ count: Int32?) -> CoverageRegionUriArrivalsRequestBuilder {
        self.count = count
        
        return self
    }
    open func withStartPage(_ startPage: Int32?) -> CoverageRegionUriArrivalsRequestBuilder {
        self.startPage = startPage
        
        return self
    }
    open func withMaxDateTimes(_ maxDateTimes: Int32?) -> CoverageRegionUriArrivalsRequestBuilder {
        self.maxDateTimes = maxDateTimes
        
        return self
    }
    open func withForbiddenId(_ forbiddenId: [String]?) -> CoverageRegionUriArrivalsRequestBuilder {
        self.forbiddenId = forbiddenId
        
        return self
    }
    open func withForbiddenUris(_ forbiddenUris: [String]?) -> CoverageRegionUriArrivalsRequestBuilder {
        self.forbiddenUris = forbiddenUris
        
        return self
    }
    open func withCalendar(_ calendar: String?) -> CoverageRegionUriArrivalsRequestBuilder {
        self.calendar = calendar
        
        return self
    }
    open func withDistance(_ distance: Int32?) -> CoverageRegionUriArrivalsRequestBuilder {
        self.distance = distance
        
        return self
    }
    open func withShowCodes(_ showCodes: Bool?) -> CoverageRegionUriArrivalsRequestBuilder {
        self.showCodes = showCodes
        
        return self
    }
    open func withDataFreshness(_ dataFreshness: DataFreshness?) -> CoverageRegionUriArrivalsRequestBuilder {
        self.dataFreshness = dataFreshness

        return self
    }
    open func withItemsPerSchedule(_ itemsPerSchedule: Int32?) -> CoverageRegionUriArrivalsRequestBuilder {
        self.itemsPerSchedule = itemsPerSchedule
        
        return self
    }
    open func withDisableGeojson(_ disableGeojson: Bool?) -> CoverageRegionUriArrivalsRequestBuilder {
        self.disableGeojson = disableGeojson
        
        return self
    }



    open func withDebugURL(_ debugURL: String?) -> CoverageRegionUriArrivalsRequestBuilder {
        self.debugURL = debugURL
        return self
    }

    open func makeUrl() -> String {
        var path = "/coverage/{region}/{uri}/arrivals"

        if let region = region {
            let regionPreEscape: String = "\(region)"
            let regionPostEscape: String = regionPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
            path = path.replacingOccurrences(of: "{region}", with: regionPostEscape, options: .literal, range: nil)
        }

        if let uri = uri {
            let uriPreEscape: String = "\(uri)"
            let uriPostEscape: String = uriPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
            path = path.replacingOccurrences(of: "{uri}", with: uriPostEscape, options: .literal, range: nil)
        }

        let URLString = String(format: "%@%@", NavitiaSDKAPI.basePath, path)
        let url = NSURLComponents(string: URLString)

        let paramValues: [String: Any?] = [
            "filter": self.filter, 
            "from_datetime": self.fromDatetime?.encodeToJSON(), 
            "until_datetime": self.untilDatetime?.encodeToJSON(), 
            "duration": self.duration?.encodeToJSON(), 
            "depth": self.depth?.encodeToJSON(), 
            "count": self.count?.encodeToJSON(), 
            "start_page": self.startPage?.encodeToJSON(), 
            "max_date_times": self.maxDateTimes?.encodeToJSON(), 
            "forbidden_id[]": self.forbiddenId, 
            "forbidden_uris[]": self.forbiddenUris, 
            "calendar": self.calendar, 
            "distance": self.distance?.encodeToJSON(), 
            "show_codes": self.showCodes, 
            "data_freshness": self.dataFreshness?.rawValue, 
            "items_per_schedule": self.itemsPerSchedule?.encodeToJSON(), 
            "disable_geojson": self.disableGeojson
        ]
        url?.queryItems = APIHelper.mapValuesToQueryItems(values: paramValues)
        url?.percentEncodedQuery = url?.percentEncodedQuery?.replacingOccurrences(of: "+", with: "%2B")

        return (debugURL ?? url?.string ?? URLString)
    }

    open func get(completion: @escaping ((_ data: Arrivals?,_ error: Error?) -> Void)) {
        if (self.region == nil) {
            completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : region"])))
        }
        if (self.uri == nil) {
            completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : uri"])))
        }

        request(self.makeUrl())
            .authenticate(user: currentApi.token, password: "")
            .validate()
            .responseObject{ (response: (DataResponse<Arrivals>)) in
                switch response.result {
                case .success:
                    completion(response.result.value, nil)
                case .failure(let error):
                    completion(nil, error)
                }
            }
    }

    open func rawGet(completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
    if (self.region == nil) {
        completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : region"])))
    }
    if (self.uri == nil) {
        completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : uri"])))
    }

    request(self.makeUrl())
        .authenticate(user: currentApi.token, password: "")
        .validate()
        .responseString{ (response: (DataResponse<String>)) in
            switch response.result {
            case .success:
                completion(response.result.value, nil)
            case .failure(let error):
                completion(nil, error)
            }
        }
    }
}



open class NextArrivalsApi: APIBase {
    let token: String

    public init(token: String) {
        self.token = token
    }

    public func newCoverageLonLatArrivalsRequestBuilder() -> CoverageLonLatArrivalsRequestBuilder {
        return CoverageLonLatArrivalsRequestBuilder(currentApi: self)
    }
    public func newCoverageLonLatUriArrivalsRequestBuilder() -> CoverageLonLatUriArrivalsRequestBuilder {
        return CoverageLonLatUriArrivalsRequestBuilder(currentApi: self)
    }
    public func newCoverageRegionArrivalsRequestBuilder() -> CoverageRegionArrivalsRequestBuilder {
        return CoverageRegionArrivalsRequestBuilder(currentApi: self)
    }
    public func newCoverageRegionUriArrivalsRequestBuilder() -> CoverageRegionUriArrivalsRequestBuilder {
        return CoverageRegionUriArrivalsRequestBuilder(currentApi: self)
    }
}
