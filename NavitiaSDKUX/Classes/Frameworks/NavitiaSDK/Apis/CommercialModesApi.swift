//
// CommercialModesApi.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation

open class CoverageLonLatCommercialModesRequestBuilder: NSObject {
    let currentApi: CommercialModesApi

    /**
    * enum for parameter odtLevel
    */
    public enum OdtLevel: String { 
        case scheduled = "scheduled"
        case all = "all"
        case zonal = "zonal"
        case withStops = "with_stops"
    }
    var lat:Double? = nil
    var lon:Double? = nil
    var startPage:Int32? = nil
    var count:Int32? = nil
    var depth:Int32? = nil
    var forbiddenId:[String]? = nil
    var forbiddenUris:[String]? = nil
    var externalCode:String? = nil
    var headsign:String? = nil
    var showCodes:Bool? = nil
    var odtLevel: OdtLevel? = nil
    var distance:Int32? = nil
    var since:Date? = nil
    var until:Date? = nil
    var disableGeojson:Bool? = nil
    var filter:String? = nil

    public init(currentApi: CommercialModesApi) {
        self.currentApi = currentApi
    }

    open func withLat(_ lat: Double) -> CoverageLonLatCommercialModesRequestBuilder {
        self.lat = lat
        return self
    }
    open func withLon(_ lon: Double) -> CoverageLonLatCommercialModesRequestBuilder {
        self.lon = lon
        return self
    }
    open func withStartPage(_ startPage: Int32) -> CoverageLonLatCommercialModesRequestBuilder {
        self.startPage = startPage
        return self
    }
    open func withCount(_ count: Int32) -> CoverageLonLatCommercialModesRequestBuilder {
        self.count = count
        return self
    }
    open func withDepth(_ depth: Int32) -> CoverageLonLatCommercialModesRequestBuilder {
        self.depth = depth
        return self
    }
    open func withForbiddenId(_ forbiddenId: [String]) -> CoverageLonLatCommercialModesRequestBuilder {
        self.forbiddenId = forbiddenId
        return self
    }
    open func withForbiddenUris(_ forbiddenUris: [String]) -> CoverageLonLatCommercialModesRequestBuilder {
        self.forbiddenUris = forbiddenUris
        return self
    }
    open func withExternalCode(_ externalCode: String) -> CoverageLonLatCommercialModesRequestBuilder {
        self.externalCode = externalCode
        return self
    }
    open func withHeadsign(_ headsign: String) -> CoverageLonLatCommercialModesRequestBuilder {
        self.headsign = headsign
        return self
    }
    open func withShowCodes(_ showCodes: Bool) -> CoverageLonLatCommercialModesRequestBuilder {
        self.showCodes = showCodes
        return self
    }
    open func withOdtLevel(_ odtLevel: OdtLevel) -> CoverageLonLatCommercialModesRequestBuilder {
        self.odtLevel = odtLevel
        return self
    }
    open func withDistance(_ distance: Int32) -> CoverageLonLatCommercialModesRequestBuilder {
        self.distance = distance
        return self
    }
    open func withSince(_ since: Date) -> CoverageLonLatCommercialModesRequestBuilder {
        self.since = since
        return self
    }
    open func withUntil(_ until: Date) -> CoverageLonLatCommercialModesRequestBuilder {
        self.until = until
        return self
    }
    open func withDisableGeojson(_ disableGeojson: Bool) -> CoverageLonLatCommercialModesRequestBuilder {
        self.disableGeojson = disableGeojson
        return self
    }
    open func withFilter(_ filter: String) -> CoverageLonLatCommercialModesRequestBuilder {
        self.filter = filter
        return self
    }

    open func makeUrl() -> String {
        var path = "/coverage/{lon};{lat}/commercial_modes"

        if (lat != nil) {
            let latPreEscape: String = "\(lat!)"
            let latPostEscape: String = latPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
            path = path.replacingOccurrences(of: "{lat}", with: latPostEscape, options: .literal, range: nil)
        }

        if (lon != nil) {
            let lonPreEscape: String = "\(lon!)"
            let lonPostEscape: String = lonPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
            path = path.replacingOccurrences(of: "{lon}", with: lonPostEscape, options: .literal, range: nil)
        }

        let URLString = "https://api.navitia.io/v1" + path
        let url = NSURLComponents(string: URLString)

        let paramValues: [String: Any?] = [
            "start_page": self.startPage?.encodeToJSON(), 
            "count": self.count?.encodeToJSON(), 
            "depth": self.depth?.encodeToJSON(), 
            "forbidden_id[]": self.forbiddenId, 
            "forbidden_uris[]": self.forbiddenUris, 
            "external_code": self.externalCode, 
            "headsign": self.headsign, 
            "show_codes": self.showCodes, 
            "odt_level": self.odtLevel?.rawValue, 
            "distance": self.distance?.encodeToJSON(), 
            "since": self.since?.encodeToJSON(), 
            "until": self.until?.encodeToJSON(), 
            "disable_geojson": self.disableGeojson, 
            "filter": self.filter
        ]
        url?.queryItems = APIHelper.mapValuesToQueryItems(values: paramValues)
        url?.percentEncodedQuery = url?.percentEncodedQuery?.replacingOccurrences(of: "+", with: "%2B")

        return (url?.string ?? URLString)
    }

    open func get(completion: @escaping ((_ data: CommercialModes?,_ error: Error?) -> Void)) {
        if (self.lat == nil) {
            completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : lat"])))
        }
        if (self.lon == nil) {
            completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : lon"])))
        }

        request(self.makeUrl())
            .authenticate(user: currentApi.token, password: "")
            .validate()
            .responseObject{ (response: (DataResponse<CommercialModes>)) in
                switch response.result {
                case .success:
                    completion(response.result.value, nil)
                case .failure(let error):
                    completion(nil, error)
                }
            }
    }

    open func rawGet(completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
    if (self.lat == nil) {
        completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : lat"])))
    }
    if (self.lon == nil) {
        completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : lon"])))
    }

    request(self.makeUrl())
        .authenticate(user: currentApi.token, password: "")
        .validate()
        .responseString{ (response: (DataResponse<String>)) in
            switch response.result {
            case .success:
                completion(response.result.value, nil)
            case .failure(let error):
                completion(nil, error)
            }
        }
    }
}

open class CoverageLonLatCommercialModesIdRequestBuilder: NSObject {
    let currentApi: CommercialModesApi

    /**
    * enum for parameter odtLevel
    */
    public enum OdtLevel: String { 
        case scheduled = "scheduled"
        case all = "all"
        case zonal = "zonal"
        case withStops = "with_stops"
    }
    var lat:Double? = nil
    var lon:Double? = nil
    var id:String? = nil
    var startPage:Int32? = nil
    var count:Int32? = nil
    var depth:Int32? = nil
    var forbiddenId:[String]? = nil
    var forbiddenUris:[String]? = nil
    var externalCode:String? = nil
    var headsign:String? = nil
    var showCodes:Bool? = nil
    var odtLevel: OdtLevel? = nil
    var distance:Int32? = nil
    var since:Date? = nil
    var until:Date? = nil
    var disableGeojson:Bool? = nil

    public init(currentApi: CommercialModesApi) {
        self.currentApi = currentApi
    }

    open func withLat(_ lat: Double) -> CoverageLonLatCommercialModesIdRequestBuilder {
        self.lat = lat
        return self
    }
    open func withLon(_ lon: Double) -> CoverageLonLatCommercialModesIdRequestBuilder {
        self.lon = lon
        return self
    }
    open func withId(_ id: String) -> CoverageLonLatCommercialModesIdRequestBuilder {
        self.id = id
        return self
    }
    open func withStartPage(_ startPage: Int32) -> CoverageLonLatCommercialModesIdRequestBuilder {
        self.startPage = startPage
        return self
    }
    open func withCount(_ count: Int32) -> CoverageLonLatCommercialModesIdRequestBuilder {
        self.count = count
        return self
    }
    open func withDepth(_ depth: Int32) -> CoverageLonLatCommercialModesIdRequestBuilder {
        self.depth = depth
        return self
    }
    open func withForbiddenId(_ forbiddenId: [String]) -> CoverageLonLatCommercialModesIdRequestBuilder {
        self.forbiddenId = forbiddenId
        return self
    }
    open func withForbiddenUris(_ forbiddenUris: [String]) -> CoverageLonLatCommercialModesIdRequestBuilder {
        self.forbiddenUris = forbiddenUris
        return self
    }
    open func withExternalCode(_ externalCode: String) -> CoverageLonLatCommercialModesIdRequestBuilder {
        self.externalCode = externalCode
        return self
    }
    open func withHeadsign(_ headsign: String) -> CoverageLonLatCommercialModesIdRequestBuilder {
        self.headsign = headsign
        return self
    }
    open func withShowCodes(_ showCodes: Bool) -> CoverageLonLatCommercialModesIdRequestBuilder {
        self.showCodes = showCodes
        return self
    }
    open func withOdtLevel(_ odtLevel: OdtLevel) -> CoverageLonLatCommercialModesIdRequestBuilder {
        self.odtLevel = odtLevel
        return self
    }
    open func withDistance(_ distance: Int32) -> CoverageLonLatCommercialModesIdRequestBuilder {
        self.distance = distance
        return self
    }
    open func withSince(_ since: Date) -> CoverageLonLatCommercialModesIdRequestBuilder {
        self.since = since
        return self
    }
    open func withUntil(_ until: Date) -> CoverageLonLatCommercialModesIdRequestBuilder {
        self.until = until
        return self
    }
    open func withDisableGeojson(_ disableGeojson: Bool) -> CoverageLonLatCommercialModesIdRequestBuilder {
        self.disableGeojson = disableGeojson
        return self
    }

    open func makeUrl() -> String {
        var path = "/coverage/{lon};{lat}/commercial_modes/{id}"

        if (lat != nil) {
            let latPreEscape: String = "\(lat!)"
            let latPostEscape: String = latPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
            path = path.replacingOccurrences(of: "{lat}", with: latPostEscape, options: .literal, range: nil)
        }

        if (lon != nil) {
            let lonPreEscape: String = "\(lon!)"
            let lonPostEscape: String = lonPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
            path = path.replacingOccurrences(of: "{lon}", with: lonPostEscape, options: .literal, range: nil)
        }

        if (id != nil) {
            let idPreEscape: String = "\(id!)"
            let idPostEscape: String = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
            path = path.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        }

        let URLString = "https://api.navitia.io/v1" + path
        let url = NSURLComponents(string: URLString)

        let paramValues: [String: Any?] = [
            "start_page": self.startPage?.encodeToJSON(), 
            "count": self.count?.encodeToJSON(), 
            "depth": self.depth?.encodeToJSON(), 
            "forbidden_id[]": self.forbiddenId, 
            "forbidden_uris[]": self.forbiddenUris, 
            "external_code": self.externalCode, 
            "headsign": self.headsign, 
            "show_codes": self.showCodes, 
            "odt_level": self.odtLevel?.rawValue, 
            "distance": self.distance?.encodeToJSON(), 
            "since": self.since?.encodeToJSON(), 
            "until": self.until?.encodeToJSON(), 
            "disable_geojson": self.disableGeojson
        ]
        url?.queryItems = APIHelper.mapValuesToQueryItems(values: paramValues)
        url?.percentEncodedQuery = url?.percentEncodedQuery?.replacingOccurrences(of: "+", with: "%2B")

        return (url?.string ?? URLString)
    }

    open func get(completion: @escaping ((_ data: CommercialModes?,_ error: Error?) -> Void)) {
        if (self.lat == nil) {
            completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : lat"])))
        }
        if (self.lon == nil) {
            completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : lon"])))
        }
        if (self.id == nil) {
            completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : id"])))
        }

        request(self.makeUrl())
            .authenticate(user: currentApi.token, password: "")
            .validate()
            .responseObject{ (response: (DataResponse<CommercialModes>)) in
                switch response.result {
                case .success:
                    completion(response.result.value, nil)
                case .failure(let error):
                    completion(nil, error)
                }
            }
    }

    open func rawGet(completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
    if (self.lat == nil) {
        completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : lat"])))
    }
    if (self.lon == nil) {
        completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : lon"])))
    }
    if (self.id == nil) {
        completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : id"])))
    }

    request(self.makeUrl())
        .authenticate(user: currentApi.token, password: "")
        .validate()
        .responseString{ (response: (DataResponse<String>)) in
            switch response.result {
            case .success:
                completion(response.result.value, nil)
            case .failure(let error):
                completion(nil, error)
            }
        }
    }
}

open class CoverageLonLatUriCommercialModesRequestBuilder: NSObject {
    let currentApi: CommercialModesApi

    /**
    * enum for parameter odtLevel
    */
    public enum OdtLevel: String { 
        case scheduled = "scheduled"
        case all = "all"
        case zonal = "zonal"
        case withStops = "with_stops"
    }
    var lat:Double? = nil
    var lon:Double? = nil
    var uri:String? = nil
    var startPage:Int32? = nil
    var count:Int32? = nil
    var depth:Int32? = nil
    var forbiddenId:[String]? = nil
    var forbiddenUris:[String]? = nil
    var externalCode:String? = nil
    var headsign:String? = nil
    var showCodes:Bool? = nil
    var odtLevel: OdtLevel? = nil
    var distance:Int32? = nil
    var since:Date? = nil
    var until:Date? = nil
    var disableGeojson:Bool? = nil
    var filter:String? = nil

    public init(currentApi: CommercialModesApi) {
        self.currentApi = currentApi
    }

    open func withLat(_ lat: Double) -> CoverageLonLatUriCommercialModesRequestBuilder {
        self.lat = lat
        return self
    }
    open func withLon(_ lon: Double) -> CoverageLonLatUriCommercialModesRequestBuilder {
        self.lon = lon
        return self
    }
    open func withUri(_ uri: String) -> CoverageLonLatUriCommercialModesRequestBuilder {
        self.uri = uri
        return self
    }
    open func withStartPage(_ startPage: Int32) -> CoverageLonLatUriCommercialModesRequestBuilder {
        self.startPage = startPage
        return self
    }
    open func withCount(_ count: Int32) -> CoverageLonLatUriCommercialModesRequestBuilder {
        self.count = count
        return self
    }
    open func withDepth(_ depth: Int32) -> CoverageLonLatUriCommercialModesRequestBuilder {
        self.depth = depth
        return self
    }
    open func withForbiddenId(_ forbiddenId: [String]) -> CoverageLonLatUriCommercialModesRequestBuilder {
        self.forbiddenId = forbiddenId
        return self
    }
    open func withForbiddenUris(_ forbiddenUris: [String]) -> CoverageLonLatUriCommercialModesRequestBuilder {
        self.forbiddenUris = forbiddenUris
        return self
    }
    open func withExternalCode(_ externalCode: String) -> CoverageLonLatUriCommercialModesRequestBuilder {
        self.externalCode = externalCode
        return self
    }
    open func withHeadsign(_ headsign: String) -> CoverageLonLatUriCommercialModesRequestBuilder {
        self.headsign = headsign
        return self
    }
    open func withShowCodes(_ showCodes: Bool) -> CoverageLonLatUriCommercialModesRequestBuilder {
        self.showCodes = showCodes
        return self
    }
    open func withOdtLevel(_ odtLevel: OdtLevel) -> CoverageLonLatUriCommercialModesRequestBuilder {
        self.odtLevel = odtLevel
        return self
    }
    open func withDistance(_ distance: Int32) -> CoverageLonLatUriCommercialModesRequestBuilder {
        self.distance = distance
        return self
    }
    open func withSince(_ since: Date) -> CoverageLonLatUriCommercialModesRequestBuilder {
        self.since = since
        return self
    }
    open func withUntil(_ until: Date) -> CoverageLonLatUriCommercialModesRequestBuilder {
        self.until = until
        return self
    }
    open func withDisableGeojson(_ disableGeojson: Bool) -> CoverageLonLatUriCommercialModesRequestBuilder {
        self.disableGeojson = disableGeojson
        return self
    }
    open func withFilter(_ filter: String) -> CoverageLonLatUriCommercialModesRequestBuilder {
        self.filter = filter
        return self
    }

    open func makeUrl() -> String {
        var path = "/coverage/{lon};{lat}/{uri}/commercial_modes"

        if (lat != nil) {
            let latPreEscape: String = "\(lat!)"
            let latPostEscape: String = latPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
            path = path.replacingOccurrences(of: "{lat}", with: latPostEscape, options: .literal, range: nil)
        }

        if (lon != nil) {
            let lonPreEscape: String = "\(lon!)"
            let lonPostEscape: String = lonPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
            path = path.replacingOccurrences(of: "{lon}", with: lonPostEscape, options: .literal, range: nil)
        }

        if (uri != nil) {
            let uriPreEscape: String = "\(uri!)"
            let uriPostEscape: String = uriPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
            path = path.replacingOccurrences(of: "{uri}", with: uriPostEscape, options: .literal, range: nil)
        }

        let URLString = "https://api.navitia.io/v1" + path
        let url = NSURLComponents(string: URLString)

        let paramValues: [String: Any?] = [
            "start_page": self.startPage?.encodeToJSON(), 
            "count": self.count?.encodeToJSON(), 
            "depth": self.depth?.encodeToJSON(), 
            "forbidden_id[]": self.forbiddenId, 
            "forbidden_uris[]": self.forbiddenUris, 
            "external_code": self.externalCode, 
            "headsign": self.headsign, 
            "show_codes": self.showCodes, 
            "odt_level": self.odtLevel?.rawValue, 
            "distance": self.distance?.encodeToJSON(), 
            "since": self.since?.encodeToJSON(), 
            "until": self.until?.encodeToJSON(), 
            "disable_geojson": self.disableGeojson, 
            "filter": self.filter
        ]
        url?.queryItems = APIHelper.mapValuesToQueryItems(values: paramValues)
        url?.percentEncodedQuery = url?.percentEncodedQuery?.replacingOccurrences(of: "+", with: "%2B")

        return (url?.string ?? URLString)
    }

    open func get(completion: @escaping ((_ data: CommercialModes?,_ error: Error?) -> Void)) {
        if (self.lat == nil) {
            completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : lat"])))
        }
        if (self.lon == nil) {
            completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : lon"])))
        }
        if (self.uri == nil) {
            completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : uri"])))
        }

        request(self.makeUrl())
            .authenticate(user: currentApi.token, password: "")
            .validate()
            .responseObject{ (response: (DataResponse<CommercialModes>)) in
                switch response.result {
                case .success:
                    completion(response.result.value, nil)
                case .failure(let error):
                    completion(nil, error)
                }
            }
    }

    open func rawGet(completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
    if (self.lat == nil) {
        completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : lat"])))
    }
    if (self.lon == nil) {
        completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : lon"])))
    }
    if (self.uri == nil) {
        completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : uri"])))
    }

    request(self.makeUrl())
        .authenticate(user: currentApi.token, password: "")
        .validate()
        .responseString{ (response: (DataResponse<String>)) in
            switch response.result {
            case .success:
                completion(response.result.value, nil)
            case .failure(let error):
                completion(nil, error)
            }
        }
    }
}

open class CoverageLonLatUriCommercialModesIdRequestBuilder: NSObject {
    let currentApi: CommercialModesApi

    /**
    * enum for parameter odtLevel
    */
    public enum OdtLevel: String { 
        case scheduled = "scheduled"
        case all = "all"
        case zonal = "zonal"
        case withStops = "with_stops"
    }
    var lat:Double? = nil
    var lon:Double? = nil
    var uri:String? = nil
    var id:String? = nil
    var startPage:Int32? = nil
    var count:Int32? = nil
    var depth:Int32? = nil
    var forbiddenId:[String]? = nil
    var forbiddenUris:[String]? = nil
    var externalCode:String? = nil
    var headsign:String? = nil
    var showCodes:Bool? = nil
    var odtLevel: OdtLevel? = nil
    var distance:Int32? = nil
    var since:Date? = nil
    var until:Date? = nil
    var disableGeojson:Bool? = nil

    public init(currentApi: CommercialModesApi) {
        self.currentApi = currentApi
    }

    open func withLat(_ lat: Double) -> CoverageLonLatUriCommercialModesIdRequestBuilder {
        self.lat = lat
        return self
    }
    open func withLon(_ lon: Double) -> CoverageLonLatUriCommercialModesIdRequestBuilder {
        self.lon = lon
        return self
    }
    open func withUri(_ uri: String) -> CoverageLonLatUriCommercialModesIdRequestBuilder {
        self.uri = uri
        return self
    }
    open func withId(_ id: String) -> CoverageLonLatUriCommercialModesIdRequestBuilder {
        self.id = id
        return self
    }
    open func withStartPage(_ startPage: Int32) -> CoverageLonLatUriCommercialModesIdRequestBuilder {
        self.startPage = startPage
        return self
    }
    open func withCount(_ count: Int32) -> CoverageLonLatUriCommercialModesIdRequestBuilder {
        self.count = count
        return self
    }
    open func withDepth(_ depth: Int32) -> CoverageLonLatUriCommercialModesIdRequestBuilder {
        self.depth = depth
        return self
    }
    open func withForbiddenId(_ forbiddenId: [String]) -> CoverageLonLatUriCommercialModesIdRequestBuilder {
        self.forbiddenId = forbiddenId
        return self
    }
    open func withForbiddenUris(_ forbiddenUris: [String]) -> CoverageLonLatUriCommercialModesIdRequestBuilder {
        self.forbiddenUris = forbiddenUris
        return self
    }
    open func withExternalCode(_ externalCode: String) -> CoverageLonLatUriCommercialModesIdRequestBuilder {
        self.externalCode = externalCode
        return self
    }
    open func withHeadsign(_ headsign: String) -> CoverageLonLatUriCommercialModesIdRequestBuilder {
        self.headsign = headsign
        return self
    }
    open func withShowCodes(_ showCodes: Bool) -> CoverageLonLatUriCommercialModesIdRequestBuilder {
        self.showCodes = showCodes
        return self
    }
    open func withOdtLevel(_ odtLevel: OdtLevel) -> CoverageLonLatUriCommercialModesIdRequestBuilder {
        self.odtLevel = odtLevel
        return self
    }
    open func withDistance(_ distance: Int32) -> CoverageLonLatUriCommercialModesIdRequestBuilder {
        self.distance = distance
        return self
    }
    open func withSince(_ since: Date) -> CoverageLonLatUriCommercialModesIdRequestBuilder {
        self.since = since
        return self
    }
    open func withUntil(_ until: Date) -> CoverageLonLatUriCommercialModesIdRequestBuilder {
        self.until = until
        return self
    }
    open func withDisableGeojson(_ disableGeojson: Bool) -> CoverageLonLatUriCommercialModesIdRequestBuilder {
        self.disableGeojson = disableGeojson
        return self
    }

    open func makeUrl() -> String {
        var path = "/coverage/{lon};{lat}/{uri}/commercial_modes/{id}"

        if (lat != nil) {
            let latPreEscape: String = "\(lat!)"
            let latPostEscape: String = latPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
            path = path.replacingOccurrences(of: "{lat}", with: latPostEscape, options: .literal, range: nil)
        }

        if (lon != nil) {
            let lonPreEscape: String = "\(lon!)"
            let lonPostEscape: String = lonPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
            path = path.replacingOccurrences(of: "{lon}", with: lonPostEscape, options: .literal, range: nil)
        }

        if (uri != nil) {
            let uriPreEscape: String = "\(uri!)"
            let uriPostEscape: String = uriPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
            path = path.replacingOccurrences(of: "{uri}", with: uriPostEscape, options: .literal, range: nil)
        }

        if (id != nil) {
            let idPreEscape: String = "\(id!)"
            let idPostEscape: String = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
            path = path.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        }

        let URLString = "https://api.navitia.io/v1" + path
        let url = NSURLComponents(string: URLString)

        let paramValues: [String: Any?] = [
            "start_page": self.startPage?.encodeToJSON(), 
            "count": self.count?.encodeToJSON(), 
            "depth": self.depth?.encodeToJSON(), 
            "forbidden_id[]": self.forbiddenId, 
            "forbidden_uris[]": self.forbiddenUris, 
            "external_code": self.externalCode, 
            "headsign": self.headsign, 
            "show_codes": self.showCodes, 
            "odt_level": self.odtLevel?.rawValue, 
            "distance": self.distance?.encodeToJSON(), 
            "since": self.since?.encodeToJSON(), 
            "until": self.until?.encodeToJSON(), 
            "disable_geojson": self.disableGeojson
        ]
        url?.queryItems = APIHelper.mapValuesToQueryItems(values: paramValues)
        url?.percentEncodedQuery = url?.percentEncodedQuery?.replacingOccurrences(of: "+", with: "%2B")

        return (url?.string ?? URLString)
    }

    open func get(completion: @escaping ((_ data: CommercialModes?,_ error: Error?) -> Void)) {
        if (self.lat == nil) {
            completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : lat"])))
        }
        if (self.lon == nil) {
            completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : lon"])))
        }
        if (self.uri == nil) {
            completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : uri"])))
        }
        if (self.id == nil) {
            completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : id"])))
        }

        request(self.makeUrl())
            .authenticate(user: currentApi.token, password: "")
            .validate()
            .responseObject{ (response: (DataResponse<CommercialModes>)) in
                switch response.result {
                case .success:
                    completion(response.result.value, nil)
                case .failure(let error):
                    completion(nil, error)
                }
            }
    }

    open func rawGet(completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
    if (self.lat == nil) {
        completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : lat"])))
    }
    if (self.lon == nil) {
        completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : lon"])))
    }
    if (self.uri == nil) {
        completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : uri"])))
    }
    if (self.id == nil) {
        completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : id"])))
    }

    request(self.makeUrl())
        .authenticate(user: currentApi.token, password: "")
        .validate()
        .responseString{ (response: (DataResponse<String>)) in
            switch response.result {
            case .success:
                completion(response.result.value, nil)
            case .failure(let error):
                completion(nil, error)
            }
        }
    }
}

open class CoverageRegionCommercialModesRequestBuilder: NSObject {
    let currentApi: CommercialModesApi

    /**
    * enum for parameter odtLevel
    */
    public enum OdtLevel: String { 
        case scheduled = "scheduled"
        case all = "all"
        case zonal = "zonal"
        case withStops = "with_stops"
    }
    var region:String? = nil
    var startPage:Int32? = nil
    var count:Int32? = nil
    var depth:Int32? = nil
    var forbiddenId:[String]? = nil
    var forbiddenUris:[String]? = nil
    var externalCode:String? = nil
    var headsign:String? = nil
    var showCodes:Bool? = nil
    var odtLevel: OdtLevel? = nil
    var distance:Int32? = nil
    var since:Date? = nil
    var until:Date? = nil
    var disableGeojson:Bool? = nil
    var filter:String? = nil

    public init(currentApi: CommercialModesApi) {
        self.currentApi = currentApi
    }

    open func withRegion(_ region: String) -> CoverageRegionCommercialModesRequestBuilder {
        self.region = region
        return self
    }
    open func withStartPage(_ startPage: Int32) -> CoverageRegionCommercialModesRequestBuilder {
        self.startPage = startPage
        return self
    }
    open func withCount(_ count: Int32) -> CoverageRegionCommercialModesRequestBuilder {
        self.count = count
        return self
    }
    open func withDepth(_ depth: Int32) -> CoverageRegionCommercialModesRequestBuilder {
        self.depth = depth
        return self
    }
    open func withForbiddenId(_ forbiddenId: [String]) -> CoverageRegionCommercialModesRequestBuilder {
        self.forbiddenId = forbiddenId
        return self
    }
    open func withForbiddenUris(_ forbiddenUris: [String]) -> CoverageRegionCommercialModesRequestBuilder {
        self.forbiddenUris = forbiddenUris
        return self
    }
    open func withExternalCode(_ externalCode: String) -> CoverageRegionCommercialModesRequestBuilder {
        self.externalCode = externalCode
        return self
    }
    open func withHeadsign(_ headsign: String) -> CoverageRegionCommercialModesRequestBuilder {
        self.headsign = headsign
        return self
    }
    open func withShowCodes(_ showCodes: Bool) -> CoverageRegionCommercialModesRequestBuilder {
        self.showCodes = showCodes
        return self
    }
    open func withOdtLevel(_ odtLevel: OdtLevel) -> CoverageRegionCommercialModesRequestBuilder {
        self.odtLevel = odtLevel
        return self
    }
    open func withDistance(_ distance: Int32) -> CoverageRegionCommercialModesRequestBuilder {
        self.distance = distance
        return self
    }
    open func withSince(_ since: Date) -> CoverageRegionCommercialModesRequestBuilder {
        self.since = since
        return self
    }
    open func withUntil(_ until: Date) -> CoverageRegionCommercialModesRequestBuilder {
        self.until = until
        return self
    }
    open func withDisableGeojson(_ disableGeojson: Bool) -> CoverageRegionCommercialModesRequestBuilder {
        self.disableGeojson = disableGeojson
        return self
    }
    open func withFilter(_ filter: String) -> CoverageRegionCommercialModesRequestBuilder {
        self.filter = filter
        return self
    }

    open func makeUrl() -> String {
        var path = "/coverage/{region}/commercial_modes"

        if (region != nil) {
            let regionPreEscape: String = "\(region!)"
            let regionPostEscape: String = regionPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
            path = path.replacingOccurrences(of: "{region}", with: regionPostEscape, options: .literal, range: nil)
        }

        let URLString = "https://api.navitia.io/v1" + path
        let url = NSURLComponents(string: URLString)

        let paramValues: [String: Any?] = [
            "start_page": self.startPage?.encodeToJSON(), 
            "count": self.count?.encodeToJSON(), 
            "depth": self.depth?.encodeToJSON(), 
            "forbidden_id[]": self.forbiddenId, 
            "forbidden_uris[]": self.forbiddenUris, 
            "external_code": self.externalCode, 
            "headsign": self.headsign, 
            "show_codes": self.showCodes, 
            "odt_level": self.odtLevel?.rawValue, 
            "distance": self.distance?.encodeToJSON(), 
            "since": self.since?.encodeToJSON(), 
            "until": self.until?.encodeToJSON(), 
            "disable_geojson": self.disableGeojson, 
            "filter": self.filter
        ]
        url?.queryItems = APIHelper.mapValuesToQueryItems(values: paramValues)
        url?.percentEncodedQuery = url?.percentEncodedQuery?.replacingOccurrences(of: "+", with: "%2B")

        return (url?.string ?? URLString)
    }

    open func get(completion: @escaping ((_ data: CommercialModes?,_ error: Error?) -> Void)) {
        if (self.region == nil) {
            completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : region"])))
        }

        request(self.makeUrl())
            .authenticate(user: currentApi.token, password: "")
            .validate()
            .responseObject{ (response: (DataResponse<CommercialModes>)) in
                switch response.result {
                case .success:
                    completion(response.result.value, nil)
                case .failure(let error):
                    completion(nil, error)
                }
            }
    }

    open func rawGet(completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
    if (self.region == nil) {
        completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : region"])))
    }

    request(self.makeUrl())
        .authenticate(user: currentApi.token, password: "")
        .validate()
        .responseString{ (response: (DataResponse<String>)) in
            switch response.result {
            case .success:
                completion(response.result.value, nil)
            case .failure(let error):
                completion(nil, error)
            }
        }
    }
}

open class CoverageRegionCommercialModesIdRequestBuilder: NSObject {
    let currentApi: CommercialModesApi

    /**
    * enum for parameter odtLevel
    */
    public enum OdtLevel: String { 
        case scheduled = "scheduled"
        case all = "all"
        case zonal = "zonal"
        case withStops = "with_stops"
    }
    var region:String? = nil
    var id:String? = nil
    var startPage:Int32? = nil
    var count:Int32? = nil
    var depth:Int32? = nil
    var forbiddenId:[String]? = nil
    var forbiddenUris:[String]? = nil
    var externalCode:String? = nil
    var headsign:String? = nil
    var showCodes:Bool? = nil
    var odtLevel: OdtLevel? = nil
    var distance:Int32? = nil
    var since:Date? = nil
    var until:Date? = nil
    var disableGeojson:Bool? = nil

    public init(currentApi: CommercialModesApi) {
        self.currentApi = currentApi
    }

    open func withRegion(_ region: String) -> CoverageRegionCommercialModesIdRequestBuilder {
        self.region = region
        return self
    }
    open func withId(_ id: String) -> CoverageRegionCommercialModesIdRequestBuilder {
        self.id = id
        return self
    }
    open func withStartPage(_ startPage: Int32) -> CoverageRegionCommercialModesIdRequestBuilder {
        self.startPage = startPage
        return self
    }
    open func withCount(_ count: Int32) -> CoverageRegionCommercialModesIdRequestBuilder {
        self.count = count
        return self
    }
    open func withDepth(_ depth: Int32) -> CoverageRegionCommercialModesIdRequestBuilder {
        self.depth = depth
        return self
    }
    open func withForbiddenId(_ forbiddenId: [String]) -> CoverageRegionCommercialModesIdRequestBuilder {
        self.forbiddenId = forbiddenId
        return self
    }
    open func withForbiddenUris(_ forbiddenUris: [String]) -> CoverageRegionCommercialModesIdRequestBuilder {
        self.forbiddenUris = forbiddenUris
        return self
    }
    open func withExternalCode(_ externalCode: String) -> CoverageRegionCommercialModesIdRequestBuilder {
        self.externalCode = externalCode
        return self
    }
    open func withHeadsign(_ headsign: String) -> CoverageRegionCommercialModesIdRequestBuilder {
        self.headsign = headsign
        return self
    }
    open func withShowCodes(_ showCodes: Bool) -> CoverageRegionCommercialModesIdRequestBuilder {
        self.showCodes = showCodes
        return self
    }
    open func withOdtLevel(_ odtLevel: OdtLevel) -> CoverageRegionCommercialModesIdRequestBuilder {
        self.odtLevel = odtLevel
        return self
    }
    open func withDistance(_ distance: Int32) -> CoverageRegionCommercialModesIdRequestBuilder {
        self.distance = distance
        return self
    }
    open func withSince(_ since: Date) -> CoverageRegionCommercialModesIdRequestBuilder {
        self.since = since
        return self
    }
    open func withUntil(_ until: Date) -> CoverageRegionCommercialModesIdRequestBuilder {
        self.until = until
        return self
    }
    open func withDisableGeojson(_ disableGeojson: Bool) -> CoverageRegionCommercialModesIdRequestBuilder {
        self.disableGeojson = disableGeojson
        return self
    }

    open func makeUrl() -> String {
        var path = "/coverage/{region}/commercial_modes/{id}"

        if (region != nil) {
            let regionPreEscape: String = "\(region!)"
            let regionPostEscape: String = regionPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
            path = path.replacingOccurrences(of: "{region}", with: regionPostEscape, options: .literal, range: nil)
        }

        if (id != nil) {
            let idPreEscape: String = "\(id!)"
            let idPostEscape: String = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
            path = path.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        }

        let URLString = "https://api.navitia.io/v1" + path
        let url = NSURLComponents(string: URLString)

        let paramValues: [String: Any?] = [
            "start_page": self.startPage?.encodeToJSON(), 
            "count": self.count?.encodeToJSON(), 
            "depth": self.depth?.encodeToJSON(), 
            "forbidden_id[]": self.forbiddenId, 
            "forbidden_uris[]": self.forbiddenUris, 
            "external_code": self.externalCode, 
            "headsign": self.headsign, 
            "show_codes": self.showCodes, 
            "odt_level": self.odtLevel?.rawValue, 
            "distance": self.distance?.encodeToJSON(), 
            "since": self.since?.encodeToJSON(), 
            "until": self.until?.encodeToJSON(), 
            "disable_geojson": self.disableGeojson
        ]
        url?.queryItems = APIHelper.mapValuesToQueryItems(values: paramValues)
        url?.percentEncodedQuery = url?.percentEncodedQuery?.replacingOccurrences(of: "+", with: "%2B")

        return (url?.string ?? URLString)
    }

    open func get(completion: @escaping ((_ data: CommercialModes?,_ error: Error?) -> Void)) {
        if (self.region == nil) {
            completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : region"])))
        }
        if (self.id == nil) {
            completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : id"])))
        }

        request(self.makeUrl())
            .authenticate(user: currentApi.token, password: "")
            .validate()
            .responseObject{ (response: (DataResponse<CommercialModes>)) in
                switch response.result {
                case .success:
                    completion(response.result.value, nil)
                case .failure(let error):
                    completion(nil, error)
                }
            }
    }

    open func rawGet(completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
    if (self.region == nil) {
        completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : region"])))
    }
    if (self.id == nil) {
        completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : id"])))
    }

    request(self.makeUrl())
        .authenticate(user: currentApi.token, password: "")
        .validate()
        .responseString{ (response: (DataResponse<String>)) in
            switch response.result {
            case .success:
                completion(response.result.value, nil)
            case .failure(let error):
                completion(nil, error)
            }
        }
    }
}

open class CoverageRegionUriCommercialModesRequestBuilder: NSObject {
    let currentApi: CommercialModesApi

    /**
    * enum for parameter odtLevel
    */
    public enum OdtLevel: String { 
        case scheduled = "scheduled"
        case all = "all"
        case zonal = "zonal"
        case withStops = "with_stops"
    }
    var region:String? = nil
    var uri:String? = nil
    var startPage:Int32? = nil
    var count:Int32? = nil
    var depth:Int32? = nil
    var forbiddenId:[String]? = nil
    var forbiddenUris:[String]? = nil
    var externalCode:String? = nil
    var headsign:String? = nil
    var showCodes:Bool? = nil
    var odtLevel: OdtLevel? = nil
    var distance:Int32? = nil
    var since:Date? = nil
    var until:Date? = nil
    var disableGeojson:Bool? = nil
    var filter:String? = nil

    public init(currentApi: CommercialModesApi) {
        self.currentApi = currentApi
    }

    open func withRegion(_ region: String) -> CoverageRegionUriCommercialModesRequestBuilder {
        self.region = region
        return self
    }
    open func withUri(_ uri: String) -> CoverageRegionUriCommercialModesRequestBuilder {
        self.uri = uri
        return self
    }
    open func withStartPage(_ startPage: Int32) -> CoverageRegionUriCommercialModesRequestBuilder {
        self.startPage = startPage
        return self
    }
    open func withCount(_ count: Int32) -> CoverageRegionUriCommercialModesRequestBuilder {
        self.count = count
        return self
    }
    open func withDepth(_ depth: Int32) -> CoverageRegionUriCommercialModesRequestBuilder {
        self.depth = depth
        return self
    }
    open func withForbiddenId(_ forbiddenId: [String]) -> CoverageRegionUriCommercialModesRequestBuilder {
        self.forbiddenId = forbiddenId
        return self
    }
    open func withForbiddenUris(_ forbiddenUris: [String]) -> CoverageRegionUriCommercialModesRequestBuilder {
        self.forbiddenUris = forbiddenUris
        return self
    }
    open func withExternalCode(_ externalCode: String) -> CoverageRegionUriCommercialModesRequestBuilder {
        self.externalCode = externalCode
        return self
    }
    open func withHeadsign(_ headsign: String) -> CoverageRegionUriCommercialModesRequestBuilder {
        self.headsign = headsign
        return self
    }
    open func withShowCodes(_ showCodes: Bool) -> CoverageRegionUriCommercialModesRequestBuilder {
        self.showCodes = showCodes
        return self
    }
    open func withOdtLevel(_ odtLevel: OdtLevel) -> CoverageRegionUriCommercialModesRequestBuilder {
        self.odtLevel = odtLevel
        return self
    }
    open func withDistance(_ distance: Int32) -> CoverageRegionUriCommercialModesRequestBuilder {
        self.distance = distance
        return self
    }
    open func withSince(_ since: Date) -> CoverageRegionUriCommercialModesRequestBuilder {
        self.since = since
        return self
    }
    open func withUntil(_ until: Date) -> CoverageRegionUriCommercialModesRequestBuilder {
        self.until = until
        return self
    }
    open func withDisableGeojson(_ disableGeojson: Bool) -> CoverageRegionUriCommercialModesRequestBuilder {
        self.disableGeojson = disableGeojson
        return self
    }
    open func withFilter(_ filter: String) -> CoverageRegionUriCommercialModesRequestBuilder {
        self.filter = filter
        return self
    }

    open func makeUrl() -> String {
        var path = "/coverage/{region}/{uri}/commercial_modes"

        if (region != nil) {
            let regionPreEscape: String = "\(region!)"
            let regionPostEscape: String = regionPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
            path = path.replacingOccurrences(of: "{region}", with: regionPostEscape, options: .literal, range: nil)
        }

        if (uri != nil) {
            let uriPreEscape: String = "\(uri!)"
            let uriPostEscape: String = uriPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
            path = path.replacingOccurrences(of: "{uri}", with: uriPostEscape, options: .literal, range: nil)
        }

        let URLString = "https://api.navitia.io/v1" + path
        let url = NSURLComponents(string: URLString)

        let paramValues: [String: Any?] = [
            "start_page": self.startPage?.encodeToJSON(), 
            "count": self.count?.encodeToJSON(), 
            "depth": self.depth?.encodeToJSON(), 
            "forbidden_id[]": self.forbiddenId, 
            "forbidden_uris[]": self.forbiddenUris, 
            "external_code": self.externalCode, 
            "headsign": self.headsign, 
            "show_codes": self.showCodes, 
            "odt_level": self.odtLevel?.rawValue, 
            "distance": self.distance?.encodeToJSON(), 
            "since": self.since?.encodeToJSON(), 
            "until": self.until?.encodeToJSON(), 
            "disable_geojson": self.disableGeojson, 
            "filter": self.filter
        ]
        url?.queryItems = APIHelper.mapValuesToQueryItems(values: paramValues)
        url?.percentEncodedQuery = url?.percentEncodedQuery?.replacingOccurrences(of: "+", with: "%2B")

        return (url?.string ?? URLString)
    }

    open func get(completion: @escaping ((_ data: CommercialModes?,_ error: Error?) -> Void)) {
        if (self.region == nil) {
            completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : region"])))
        }
        if (self.uri == nil) {
            completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : uri"])))
        }

        request(self.makeUrl())
            .authenticate(user: currentApi.token, password: "")
            .validate()
            .responseObject{ (response: (DataResponse<CommercialModes>)) in
                switch response.result {
                case .success:
                    completion(response.result.value, nil)
                case .failure(let error):
                    completion(nil, error)
                }
            }
    }

    open func rawGet(completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
    if (self.region == nil) {
        completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : region"])))
    }
    if (self.uri == nil) {
        completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : uri"])))
    }

    request(self.makeUrl())
        .authenticate(user: currentApi.token, password: "")
        .validate()
        .responseString{ (response: (DataResponse<String>)) in
            switch response.result {
            case .success:
                completion(response.result.value, nil)
            case .failure(let error):
                completion(nil, error)
            }
        }
    }
}

open class CoverageRegionUriCommercialModesIdRequestBuilder: NSObject {
    let currentApi: CommercialModesApi

    /**
    * enum for parameter odtLevel
    */
    public enum OdtLevel: String { 
        case scheduled = "scheduled"
        case all = "all"
        case zonal = "zonal"
        case withStops = "with_stops"
    }
    var region:String? = nil
    var uri:String? = nil
    var id:String? = nil
    var startPage:Int32? = nil
    var count:Int32? = nil
    var depth:Int32? = nil
    var forbiddenId:[String]? = nil
    var forbiddenUris:[String]? = nil
    var externalCode:String? = nil
    var headsign:String? = nil
    var showCodes:Bool? = nil
    var odtLevel: OdtLevel? = nil
    var distance:Int32? = nil
    var since:Date? = nil
    var until:Date? = nil
    var disableGeojson:Bool? = nil

    public init(currentApi: CommercialModesApi) {
        self.currentApi = currentApi
    }

    open func withRegion(_ region: String) -> CoverageRegionUriCommercialModesIdRequestBuilder {
        self.region = region
        return self
    }
    open func withUri(_ uri: String) -> CoverageRegionUriCommercialModesIdRequestBuilder {
        self.uri = uri
        return self
    }
    open func withId(_ id: String) -> CoverageRegionUriCommercialModesIdRequestBuilder {
        self.id = id
        return self
    }
    open func withStartPage(_ startPage: Int32) -> CoverageRegionUriCommercialModesIdRequestBuilder {
        self.startPage = startPage
        return self
    }
    open func withCount(_ count: Int32) -> CoverageRegionUriCommercialModesIdRequestBuilder {
        self.count = count
        return self
    }
    open func withDepth(_ depth: Int32) -> CoverageRegionUriCommercialModesIdRequestBuilder {
        self.depth = depth
        return self
    }
    open func withForbiddenId(_ forbiddenId: [String]) -> CoverageRegionUriCommercialModesIdRequestBuilder {
        self.forbiddenId = forbiddenId
        return self
    }
    open func withForbiddenUris(_ forbiddenUris: [String]) -> CoverageRegionUriCommercialModesIdRequestBuilder {
        self.forbiddenUris = forbiddenUris
        return self
    }
    open func withExternalCode(_ externalCode: String) -> CoverageRegionUriCommercialModesIdRequestBuilder {
        self.externalCode = externalCode
        return self
    }
    open func withHeadsign(_ headsign: String) -> CoverageRegionUriCommercialModesIdRequestBuilder {
        self.headsign = headsign
        return self
    }
    open func withShowCodes(_ showCodes: Bool) -> CoverageRegionUriCommercialModesIdRequestBuilder {
        self.showCodes = showCodes
        return self
    }
    open func withOdtLevel(_ odtLevel: OdtLevel) -> CoverageRegionUriCommercialModesIdRequestBuilder {
        self.odtLevel = odtLevel
        return self
    }
    open func withDistance(_ distance: Int32) -> CoverageRegionUriCommercialModesIdRequestBuilder {
        self.distance = distance
        return self
    }
    open func withSince(_ since: Date) -> CoverageRegionUriCommercialModesIdRequestBuilder {
        self.since = since
        return self
    }
    open func withUntil(_ until: Date) -> CoverageRegionUriCommercialModesIdRequestBuilder {
        self.until = until
        return self
    }
    open func withDisableGeojson(_ disableGeojson: Bool) -> CoverageRegionUriCommercialModesIdRequestBuilder {
        self.disableGeojson = disableGeojson
        return self
    }

    open func makeUrl() -> String {
        var path = "/coverage/{region}/{uri}/commercial_modes/{id}"

        if (region != nil) {
            let regionPreEscape: String = "\(region!)"
            let regionPostEscape: String = regionPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
            path = path.replacingOccurrences(of: "{region}", with: regionPostEscape, options: .literal, range: nil)
        }

        if (uri != nil) {
            let uriPreEscape: String = "\(uri!)"
            let uriPostEscape: String = uriPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
            path = path.replacingOccurrences(of: "{uri}", with: uriPostEscape, options: .literal, range: nil)
        }

        if (id != nil) {
            let idPreEscape: String = "\(id!)"
            let idPostEscape: String = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
            path = path.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        }

        let URLString = "https://api.navitia.io/v1" + path
        let url = NSURLComponents(string: URLString)

        let paramValues: [String: Any?] = [
            "start_page": self.startPage?.encodeToJSON(), 
            "count": self.count?.encodeToJSON(), 
            "depth": self.depth?.encodeToJSON(), 
            "forbidden_id[]": self.forbiddenId, 
            "forbidden_uris[]": self.forbiddenUris, 
            "external_code": self.externalCode, 
            "headsign": self.headsign, 
            "show_codes": self.showCodes, 
            "odt_level": self.odtLevel?.rawValue, 
            "distance": self.distance?.encodeToJSON(), 
            "since": self.since?.encodeToJSON(), 
            "until": self.until?.encodeToJSON(), 
            "disable_geojson": self.disableGeojson
        ]
        url?.queryItems = APIHelper.mapValuesToQueryItems(values: paramValues)
        url?.percentEncodedQuery = url?.percentEncodedQuery?.replacingOccurrences(of: "+", with: "%2B")

        return (url?.string ?? URLString)
    }

    open func get(completion: @escaping ((_ data: CommercialModes?,_ error: Error?) -> Void)) {
        if (self.region == nil) {
            completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : region"])))
        }
        if (self.uri == nil) {
            completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : uri"])))
        }
        if (self.id == nil) {
            completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : id"])))
        }

        request(self.makeUrl())
            .authenticate(user: currentApi.token, password: "")
            .validate()
            .responseObject{ (response: (DataResponse<CommercialModes>)) in
                switch response.result {
                case .success:
                    completion(response.result.value, nil)
                case .failure(let error):
                    completion(nil, error)
                }
            }
    }

    open func rawGet(completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
    if (self.region == nil) {
        completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : region"])))
    }
    if (self.uri == nil) {
        completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : uri"])))
    }
    if (self.id == nil) {
        completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : id"])))
    }

    request(self.makeUrl())
        .authenticate(user: currentApi.token, password: "")
        .validate()
        .responseString{ (response: (DataResponse<String>)) in
            switch response.result {
            case .success:
                completion(response.result.value, nil)
            case .failure(let error):
                completion(nil, error)
            }
        }
    }
}



open class CommercialModesApi: APIBase {
    let token: String

    public init(token: String) {
        self.token = token
    }

    public func newCoverageLonLatCommercialModesRequestBuilder() -> CoverageLonLatCommercialModesRequestBuilder {
        return CoverageLonLatCommercialModesRequestBuilder(currentApi: self)
    }
    public func newCoverageLonLatCommercialModesIdRequestBuilder() -> CoverageLonLatCommercialModesIdRequestBuilder {
        return CoverageLonLatCommercialModesIdRequestBuilder(currentApi: self)
    }
    public func newCoverageLonLatUriCommercialModesRequestBuilder() -> CoverageLonLatUriCommercialModesRequestBuilder {
        return CoverageLonLatUriCommercialModesRequestBuilder(currentApi: self)
    }
    public func newCoverageLonLatUriCommercialModesIdRequestBuilder() -> CoverageLonLatUriCommercialModesIdRequestBuilder {
        return CoverageLonLatUriCommercialModesIdRequestBuilder(currentApi: self)
    }
    public func newCoverageRegionCommercialModesRequestBuilder() -> CoverageRegionCommercialModesRequestBuilder {
        return CoverageRegionCommercialModesRequestBuilder(currentApi: self)
    }
    public func newCoverageRegionCommercialModesIdRequestBuilder() -> CoverageRegionCommercialModesIdRequestBuilder {
        return CoverageRegionCommercialModesIdRequestBuilder(currentApi: self)
    }
    public func newCoverageRegionUriCommercialModesRequestBuilder() -> CoverageRegionUriCommercialModesRequestBuilder {
        return CoverageRegionUriCommercialModesRequestBuilder(currentApi: self)
    }
    public func newCoverageRegionUriCommercialModesIdRequestBuilder() -> CoverageRegionUriCommercialModesIdRequestBuilder {
        return CoverageRegionUriCommercialModesIdRequestBuilder(currentApi: self)
    }
}
